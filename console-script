
function rs(x) {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(x);
    }, 2000);
  });
}

var pill = f => x => (args = []) => async () => await f(x, ...args)

async function waitP (ms) {
  await rs(ms)
} 

var fnc = async (p) => {
  var jay = "girl";
  await waitP(3000)
  p.then(v => {
    jay = v;
    console.log(jay);
    return jay;
  })
}

console.log('fnc(squareP(3))', fnc(squareP(3)))

async function add2(x) {
  const p_a = rs(20);
const p_b = rs(30);
  return x + await p_a + await p_b;
}

var add3 = async function(x) { // async function expression assigned to a variable
  var a = await rs(20);
  var b = await rs(30);
  return x + a + b;
};

(async function(x) { // async function expression used as an IIFE
  var p_a = rs(20);
  var p_b = rs(30);
  return x + await p_a + await p_b;
})(10).then(v => {
  console.log(v);  // prints 60 after 2 seconds.
});

//If the value is not a Promise, 
//it converts the value to a resolved Promise, and waits for it.

async function f2() {
  var y = await 20;
  console.log(y); // 20
}
f2();
  
function f7 (x) {
return add3(x);
}

var f = func => async promise => {
  var arr = []
  var a;
    await promise.then(
    v => {
      a = v
      arr.push(a)
      var b = func(a)
      arr.push(b.x)
    }
  )
    return bind(b.x	,arr);
}

f(cube)(squareP(7))

var fz = func => x => (args = []) => async id => {
  var arr = []
  var a;
    await promise.then(
    v => {
      a = v
      arr.push(a)
      var b = func(a)
      arr.push(b.x)
    }
  )
    return bind(b.x	,arr);
}

function returnValue (x, func, args) {
this.f = "returnValue -- foobar"
  func(x, ...args).then(e => f = e)
  return f;
}

const incP = async x => {
      await wait(2000);
  return ret(x + 1);
}

const addP = x => async y => {
  await wait(2000) 
  return ret(x + y);
}

async function cubeP (x) {
  await wait(2000) 
  return x*x*x;
}

function wait(ms) {
  return new Promise(r => setTimeout(r, ms));
}

function ExtP (p) {
  this.x = "Jimbo";
  return async function f () {
    await function () {p.then(q => this.x = q)
    console.log('ExtP this.x',this.x);
return this.x;
    }
  }
}

async function fnc2 (p) {
  var a = await extractP(p);
  return w
}

var fu4 = new ExtP(cube(5));  
  
var stix = fu4()
console.log('stix',stix)

bind(3)(addP(2)).then(v => bind(v.x)(cube)).then(b => console.log(b(terminate).pop()))

bind(3)(addP(2)).then(v => bind(v.x)(cube)(addC(-25))(square)(terminate)).then(v => m7.ret(v))

bind(3)(addP(2)).then(v => bind(v.x)(cube)
(addC(-25))(square)(terminate))
.then(v => {m7.ret(v); console.log(m7.x)})

/*
12:51:41.133 monad.js:127 Entering bind. x and ar are 3 []
12:51:41.134 monad.js:135 bind: y instanceof Promise, x is 3
12:51:41.134 Promise {[[PromiseStatus]]: "pending", [[PromiseValue]]: undefined}
12:51:43.135 monad.js:127 Entering bind. x and ar are 5 []
12:51:43.135 monad.js:142 bind y.x and ar 125 (2) [5, 125]
12:51:43.136 monad.js:127 Entering bind. x and ar are 125 (2) [5, 125]
12:51:43.137 monad.js:142 bind y.x and ar 100 (3) [5, 125, 100]
12:51:43.138 monad.js:127 Entering bind. x and ar are 100 (3) [5, 125, 100]
12:51:43.138 monad.js:142 bind y.x and ar 10000 (4) [5, 125, 100, 10000]
12:51:43.139 monad.js:127 Entering bind. x and ar are 10000 (4) [5, 125, 100, 10000]
12:51:43.140 VM4189:1 (4) [5, 125, 100, 10000]
*/








                                
