"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var FCAMIL = /** @class */ (function () {
    function FCAMIL(out, op) {
        this.out = out;
        this.op = op;
    }
    FCAMIL.prototype._n = function (t) {
        this.out._n(t);
    };
    FCAMIL.prototype._e = function (err) {
        this.out._e(err);
    };
    FCAMIL.prototype._c = function () {
        this.op.less();
    };
    return FCAMIL;
}());
var FlattenConcAMOperator = /** @class */ (function () {
    function FlattenConcAMOperator(n, ins) {
        this.n = n;
        this.ins = ins;
        this.type = 'flattenConcurrentlyAtMost';
        this.out = null;
        this._l = 0;
        this._d = false;
        this._seq = [];
    }
    FlattenConcAMOperator.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    FlattenConcAMOperator.prototype._stop = function () {
        this.ins._remove(this);
        this._l = 0;
        this.out = null;
        this._seq = [];
    };
    FlattenConcAMOperator.prototype.less = function () {
        var seq = this._seq;
        if (--this._l === 0 && seq.length === 0 && this._d) {
            var u = this.out;
            if (!u)
                return;
            u._c();
        }
        if (this._l < this.n && seq.length > 0) {
            this._n(seq.shift());
        }
    };
    FlattenConcAMOperator.prototype._n = function (s) {
        var u = this.out;
        if (!u)
            return;
        if (this._l < this.n) {
            this._l++;
            s._add(new FCAMIL(u, this));
        }
        else {
            this._seq.push(s);
        }
    };
    FlattenConcAMOperator.prototype._e = function (err) {
        var u = this.out;
        if (!u)
            return;
        u._e(err);
    };
    FlattenConcAMOperator.prototype._c = function () {
        var seq = this._seq;
        this._d = true;
        if (this._l === 0 && seq.length === 0) {
            var u = this.out;
            if (!u)
                return;
            u._c();
        }
    };
    return FlattenConcAMOperator;
}());
exports.FlattenConcAMOperator = FlattenConcAMOperator;
/**
 * Flattens a "stream of streams", handling multiple concurrent nested streams
 * simultaneously, up to some limit `n`.
 *
 * If the input stream is a stream that emits streams, then this operator will
 * return an output stream which is a flat stream: emits regular events. The
 * flattening happens concurrently, up to the configured limit. It works like
 * this: when the input stream emits a nested stream,
 * *flattenConcurrentlyAtMost* will start imitating that nested one. When the
 * next nested stream is emitted on the input stream,
 * *flattenConcurrentlyAtMost* will check to see how many streams it is connected
 * to. If it is connected to a number of streams less than the limit, it will also
 * imitate that new one, but will continue to imitate the previous nested streams
 * as well.
 *
 * If the limit has already been reached, *flattenConcurrentlyAtMost* will put the
 * stream in a queue. When any of the streams it is listening to completes, a stream
 * is taken out of the queue and `flattenConcurrentlyAtMost` will connect to it.
 *
 * This process continues until the metastream completes and there are no more
 * connected streams or streams in the queue.
 *
 * Marble diagrams:
 *
 * ```text
 * --+--------+---------------
 *   \        \
 *    \       ----1----2---3--|
 *    --a--b----c----|
 *     flattenConcurrentlyAtMost(1)
 * -----a--b----c-1----2---3--|
 * ```
 *
 * ```text
 * --+---+---+-|
 *    \   \   \
 *     \   \   ---fgh----i-----jh--|
 *      \   -----1----2----3--|
 *       ---a--b-----c--|
 *     flattenConcurrentlyAtMost(2)
 * ---------a--b-1---c2--i-3------fgh----i-----jh--|
 * ```
 *
 * @return {Stream}
 */
function flattenConcurrentlyAtMost(n) {
    return function flattenConcAMOperator(ins) {
        return new index_1.Stream(new FlattenConcAMOperator(n, ins));
    };
}
exports.default = flattenConcurrentlyAtMost;
//# sourceMappingURL=data:application/json;base64,