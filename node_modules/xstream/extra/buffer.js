"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var SeparatorIL = /** @class */ (function () {
    function SeparatorIL(out, op) {
        this.out = out;
        this.op = op;
    }
    SeparatorIL.prototype._n = function (t) {
        this.op.flush();
    };
    SeparatorIL.prototype._e = function (err) {
        this.out._e(err);
    };
    SeparatorIL.prototype._c = function () {
        this.op.flush();
        this.out._c();
    };
    return SeparatorIL;
}());
var BufferOperator = /** @class */ (function () {
    function BufferOperator(s, ins) {
        this.s = s;
        this.ins = ins;
        this.type = 'buffer';
        this.out = null;
        this.acc = [];
    }
    BufferOperator.prototype.flush = function () {
        if (this.acc.length > 0) {
            this.out._n(this.acc);
            this.acc = [];
        }
    };
    BufferOperator.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
        this.sil = new SeparatorIL(out, this);
        this.s._add(this.sil);
    };
    BufferOperator.prototype._stop = function () {
        this.flush();
        this.ins._remove(this);
        this.out = null;
        this.s._remove(this.sil);
        this.sil = index_1.NO_IL;
    };
    BufferOperator.prototype._n = function (t) {
        this.acc.push(t);
    };
    BufferOperator.prototype._e = function (err) {
        var u = this.out;
        if (!u)
            return;
        u._e(err);
    };
    BufferOperator.prototype._c = function () {
        var out = this.out;
        if (!out)
            return;
        this.flush();
        out._c();
    };
    return BufferOperator;
}());
/**
 * Buffers a stream using a separator stream. Returns a stream that emits
 * arrays.
 *
 * Marble diagram:
 *
 * ```text
 * --1--2--3--4--5--6--7--8--9|
 * buffer( -a---------b---------c| )
 * ---------[1,2,3]---[4,5,6]---[7,8,9]|
 * ```
 *
 * Example:
 *
 * ```js
 * import buffer from 'xstream/extra/buffer'
 *
 * const source = xs.periodic(50).take(10);
 * const separator = xs.periodic(170).take(3);
 * const buffered = source.compose(buffer(separator));
 *
 * buffered.addListener({
 *   next: arr => console.log(arr),
 *   error: err => console.error(err)
 * });
 * ```
 *
 * ```text
 * > [0, 1, 2]
 * > [3, 4, 5]
 * > [6, 7, 8]
 * ```
 *
 * @param {Stream} separator Some other stream that is used to know when to
 * split the output stream.
 * @return {Stream}
 */
function buffer(s) {
    return function bufferOperator(ins) {
        return new index_1.Stream(new BufferOperator(s, ins));
    };
}
exports.default = buffer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVmZmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V4dHJhL2J1ZmZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUE4RTtBQUU5RTtJQUNFLHFCQUFtQixHQUFxQixFQUFVLEVBQXFCO1FBQXBELFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7SUFDdkUsQ0FBQztJQUVELHdCQUFFLEdBQUYsVUFBRyxDQUFNO1FBQ1AsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBRUQsd0JBQUUsR0FBRixVQUFHLEdBQVE7UUFDVCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsd0JBQUUsR0FBRjtRQUNFLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBaEJELElBZ0JDO0FBRUQ7SUFNRSx3QkFBbUIsQ0FBYyxFQUFTLEdBQWM7UUFBckMsTUFBQyxHQUFELENBQUMsQ0FBYTtRQUFTLFFBQUcsR0FBSCxHQUFHLENBQVc7UUFMakQsU0FBSSxHQUFHLFFBQVEsQ0FBQztRQUNoQixRQUFHLEdBQXFCLElBQVcsQ0FBQztRQUVuQyxRQUFHLEdBQWEsRUFBRSxDQUFDO0lBRzNCLENBQUM7SUFFRCw4QkFBSyxHQUFMO1FBQ0UsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1NBQ2Y7SUFDSCxDQUFDO0lBRUQsK0JBQU0sR0FBTixVQUFPLEdBQXFCO1FBQzFCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCw4QkFBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFXLENBQUM7UUFDdkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEdBQUcsYUFBSyxDQUFDO0lBQ25CLENBQUM7SUFFRCwyQkFBRSxHQUFGLFVBQUcsQ0FBSTtRQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFRCwyQkFBRSxHQUFGLFVBQUcsR0FBUTtRQUNULElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDbkIsSUFBSSxDQUFDLENBQUM7WUFBRSxPQUFPO1FBQ2YsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNaLENBQUM7SUFFRCwyQkFBRSxHQUFGO1FBQ0UsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRztZQUFFLE9BQU87UUFDakIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQS9DRCxJQStDQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQ0c7QUFDSCxnQkFBa0MsQ0FBYztJQUM5QyxPQUFPLHdCQUF3QixHQUFjO1FBQzNDLE9BQU8sSUFBSSxjQUFNLENBQVcsSUFBSSxjQUFjLENBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUpELHlCQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPcGVyYXRvciwgU3RyZWFtLCBJbnRlcm5hbExpc3RlbmVyLCBPdXRTZW5kZXIsIE5PX0lMfSBmcm9tICcuLi9pbmRleCc7XG5cbmNsYXNzIFNlcGFyYXRvcklMPFQ+IGltcGxlbWVudHMgSW50ZXJuYWxMaXN0ZW5lcjxhbnk+LCBPdXRTZW5kZXI8QXJyYXk8VD4+IHtcbiAgY29uc3RydWN0b3IocHVibGljIG91dDogU3RyZWFtPEFycmF5PFQ+PiwgcHJpdmF0ZSBvcDogQnVmZmVyT3BlcmF0b3I8VD4pIHtcbiAgfVxuXG4gIF9uKHQ6IGFueSkge1xuICAgIHRoaXMub3AuZmx1c2goKTtcbiAgfVxuXG4gIF9lKGVycjogYW55KSB7XG4gICAgdGhpcy5vdXQuX2UoZXJyKTtcbiAgfVxuXG4gIF9jKCkge1xuICAgIHRoaXMub3AuZmx1c2goKTtcbiAgICB0aGlzLm91dC5fYygpO1xuICB9XG59XG5cbmNsYXNzIEJ1ZmZlck9wZXJhdG9yPFQ+IGltcGxlbWVudHMgT3BlcmF0b3I8VCwgQXJyYXk8VD4+IHtcbiAgcHVibGljIHR5cGUgPSAnYnVmZmVyJztcbiAgcHVibGljIG91dDogU3RyZWFtPEFycmF5PFQ+PiA9IG51bGwgYXMgYW55O1xuICBwcml2YXRlIHNpbDogSW50ZXJuYWxMaXN0ZW5lcjxhbnk+O1xuICBwcml2YXRlIGFjYzogQXJyYXk8VD4gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgczogU3RyZWFtPGFueT4sIHB1YmxpYyBpbnM6IFN0cmVhbTxUPikge1xuICB9XG5cbiAgZmx1c2goKSB7XG4gICAgaWYgKHRoaXMuYWNjLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMub3V0Ll9uKHRoaXMuYWNjKTtcbiAgICAgIHRoaXMuYWNjID0gW107XG4gICAgfVxuICB9XG5cbiAgX3N0YXJ0KG91dDogU3RyZWFtPEFycmF5PFQ+Pik6IHZvaWQge1xuICAgIHRoaXMub3V0ID0gb3V0O1xuICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgdGhpcy5zaWwgPSBuZXcgU2VwYXJhdG9ySUwob3V0LCB0aGlzKTtcbiAgICB0aGlzLnMuX2FkZCh0aGlzLnNpbCk7XG4gIH1cblxuICBfc3RvcCgpOiB2b2lkIHtcbiAgICB0aGlzLmZsdXNoKCk7XG4gICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICB0aGlzLm91dCA9IG51bGwgYXMgYW55O1xuICAgIHRoaXMucy5fcmVtb3ZlKHRoaXMuc2lsKTtcbiAgICB0aGlzLnNpbCA9IE5PX0lMO1xuICB9XG5cbiAgX24odDogVCkge1xuICAgIHRoaXMuYWNjLnB1c2godCk7XG4gIH1cblxuICBfZShlcnI6IGFueSkge1xuICAgIGNvbnN0IHUgPSB0aGlzLm91dDtcbiAgICBpZiAoIXUpIHJldHVybjtcbiAgICB1Ll9lKGVycik7XG4gIH1cblxuICBfYygpIHtcbiAgICBjb25zdCBvdXQgPSB0aGlzLm91dDtcbiAgICBpZiAoIW91dCkgcmV0dXJuO1xuICAgIHRoaXMuZmx1c2goKTtcbiAgICBvdXQuX2MoKTtcbiAgfVxufVxuXG4vKipcbiAqIEJ1ZmZlcnMgYSBzdHJlYW0gdXNpbmcgYSBzZXBhcmF0b3Igc3RyZWFtLiBSZXR1cm5zIGEgc3RyZWFtIHRoYXQgZW1pdHNcbiAqIGFycmF5cy5cbiAqXG4gKiBNYXJibGUgZGlhZ3JhbTpcbiAqXG4gKiBgYGB0ZXh0XG4gKiAtLTEtLTItLTMtLTQtLTUtLTYtLTctLTgtLTl8XG4gKiBidWZmZXIoIC1hLS0tLS0tLS0tYi0tLS0tLS0tLWN8IClcbiAqIC0tLS0tLS0tLVsxLDIsM10tLS1bNCw1LDZdLS0tWzcsOCw5XXxcbiAqIGBgYFxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCBidWZmZXIgZnJvbSAneHN0cmVhbS9leHRyYS9idWZmZXInXG4gKlxuICogY29uc3Qgc291cmNlID0geHMucGVyaW9kaWMoNTApLnRha2UoMTApO1xuICogY29uc3Qgc2VwYXJhdG9yID0geHMucGVyaW9kaWMoMTcwKS50YWtlKDMpO1xuICogY29uc3QgYnVmZmVyZWQgPSBzb3VyY2UuY29tcG9zZShidWZmZXIoc2VwYXJhdG9yKSk7XG4gKlxuICogYnVmZmVyZWQuYWRkTGlzdGVuZXIoe1xuICogICBuZXh0OiBhcnIgPT4gY29uc29sZS5sb2coYXJyKSxcbiAqICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmVycm9yKGVycilcbiAqIH0pO1xuICogYGBgXG4gKlxuICogYGBgdGV4dFxuICogPiBbMCwgMSwgMl1cbiAqID4gWzMsIDQsIDVdXG4gKiA+IFs2LCA3LCA4XVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJlYW19IHNlcGFyYXRvciBTb21lIG90aGVyIHN0cmVhbSB0aGF0IGlzIHVzZWQgdG8ga25vdyB3aGVuIHRvXG4gKiBzcGxpdCB0aGUgb3V0cHV0IHN0cmVhbS5cbiAqIEByZXR1cm4ge1N0cmVhbX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVmZmVyPFQ+KHM6IFN0cmVhbTxhbnk+KTogKGluczogU3RyZWFtPFQ+KSA9PiBTdHJlYW08QXJyYXk8VD4+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJ1ZmZlck9wZXJhdG9yKGluczogU3RyZWFtPFQ+KSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW08QXJyYXk8VD4+KG5ldyBCdWZmZXJPcGVyYXRvcjxUPihzLCBpbnMpKTtcbiAgfTtcbn1cbiJdfQ==