{"code":"!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=0)}([function(e,t){throw new Error(\"Module parse failed: Unexpected token (2237:0)\\nYou may need an appropriate loader to handle this file type.\\n| h('span', styleFunc (['#ABFFBA', , ,'italic', , , ,]), \\\" Trying to scrupulously conform to the functional paradigm can stifle your creativity and slow your progress toward mastering JavaScript. \\\" ),\\n| h('p', ' My advice to anyone who wants to write JavaScript code in a functional style is to experiment with JavaScript\\\\'s first class functions. Maintain some state in closures. Wrap your head around transducers. Try some metaprogramming with and without proxies. Inside of functions, mutate variables to avoid pumping debris into memory. That is using functions to protect global space.  ' )\\n> h('p', 'In this presentation, I try to avoid mutating anything outside of function scope. Information comes from and goes to browsers, web workers, and a remote WebSockets server. Caches of prime numbers and positions on a grid are maintained for efficiency and backtracking. User names, passwords, and comments are maintained by the Haskell server.  ' ),\\n| h('p', ' From my perspective, libraries are largely black boxes with limited usefulness. If you take the time to study and understand the function \\\"Comp()\\\" (below) you might feel that you have acquired a potentially useful tool. I hope you will tweak it, add and remove features, and be emboldened to fashion specialized tools that target your specific projects rather than rely on libraries.  ' ),\\n| h('p', ' My code isn\\\\'t important. The interesting things lie beneath the surface. They are the closures, recursive functions, partially applied function, ... the essence of functional Javascript. Here\\\\'s Comp(): ' ),\")}]);","extractedComments":[]}