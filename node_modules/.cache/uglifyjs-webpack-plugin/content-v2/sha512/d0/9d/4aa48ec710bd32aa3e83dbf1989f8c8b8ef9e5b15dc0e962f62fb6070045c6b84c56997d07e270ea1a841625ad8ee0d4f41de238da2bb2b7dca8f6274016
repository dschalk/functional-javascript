{"code":"!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&n&&\"string\"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p=\"\",t(t.s=0)}([function(e,n){throw new Error(\"Module parse failed: Unexpected character '#' (1912:24)\\nYou may need an appropriate loader to handle this file type.\\n|  h('br'),\\n|  h('span.tao', ' Before delving into monads, let\\\\'s see how easy it is to compose functions without craming them into objects. Let bind() be a function that inherits from '),\\n>  h('a', {props: {href: h#Bind3h}}, hBindh ),\\n|  h('span', '. Syntax consists of calling hbind(x)h for some value hxh and then naming or defining the functions to be composed on hxh. A \\\\h(terminate)\\\\h flag at the end causes an array of return values (or resolution values of Promises) to be returned. Consider:' ), \\n|  h('br'),\")}]);","extractedComments":[]}