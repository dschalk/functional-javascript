{"code":"!function(e){var n={};function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&n&&\"string\"!=typeof e)for(var i in e)t.d(r,i,function(n){return e[n]}.bind(null,i));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p=\"\",t(t.s=0)}([function(e,n){throw new Error(\"Module parse failed: Unexpected token (1996:239)\\nYou may need an appropriate loader to handle this file type.\\n| h('div', {style: {width: '47%', fontSize: '18px', float: 'left'}}, [ // ((************ LEFT PANEL\\n| \\n> h('p', ' The statement \\\"f = Bind(\\\\'f\\\\')\\\") returns a fresh copy of _bind from Bind, but if the array Bind[\\\\'f\\\\'] already exists, f will use it whenever it executes. Also, Bind[\\\\'f\\\\'] increases in size each time f() is called. If \\\"f = Bind('f')\\\" runs again and the fresh function f() is called while a previously created instance of f() is still running, the shared array Bind[\\\\'f\\\\') will likely be useless. ' ),\\n| h('p', ' To avoid any possibility of clashes or cluttered arrays, create copies of _bind() like this: \\\"f = makeBind()\\\" and run \\\"f = makeBind()\\\" prior to each use of f(). That way, myriad instances of \\\"f()\\\" can run to completion simultaneousl, each blivious to the others. '), \\n| \")}]);","extractedComments":[]}