{"code":"!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:a})},n.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=0)}([function(e,t){throw new Error(\"Module parse failed: Unterminated string constant (1474:15)\\nYou may need an appropriate loader to handle this file type.\\n|         h('br'),\\n|         h('h3', ' Meaning of \\\\\\\"Functional JavaScript Programs\\\\\\\" ' ),\\n|         h('p', ' As used herein, a \\\"functional JavaScript program\\\" is an ES7 programs in which all functions are pure ( identical arguments always yield identical results and no side effects ). Functional Javascript programming encourages the use of higher order functions (functions that return values that are themselves functions and/or accept functions as arguments). ),\\n| h('p', ' A Functional JavaScript program can have some variable mutation,including mutations of the form \\\"x = f(x)\\\" as well as mutations confined to the scopes of functions. So \\\"const f = x => x + 1; x = f(x);\\\" is an acceptable counter that does not overly burden the call stack. Proper tail call optimization can make a more esthetically pleasing counter.'),\\n| h('p', 'You might want to implement universal immutability, especially if efficiency is a low priority, but that is not what we do here; nor do we superimpose any data type requirements over the ECMAScriptÂ® 2016 Language Specification. ' ), \")}]);","extractedComments":[]}