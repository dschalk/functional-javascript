{"code":"!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&n&&\"string\"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p=\"\",t(t.s=0)}([function(e,n){throw new Error(\"Module parse failed: Unexpected token (1899:110)\\nYou may need an appropriate loader to handle this file type.\\n| h('p', ' Recursion continues until there are no more functions or until (), null, or some variable equal to null is encountered. A final null value prompts debug8 to return the array of each function\\\\'s return value or pending Promise resolution value, which in this example is Bind.bind0. ' ),\\n| \\n> h('p', ' Left to right ordering of functions is unusual, but it is the least cumbersome way to implement Bind's recursive algorithm. A traditional function could be defined as: ' ),\\n| h('div', istyleFunc([\\\"#58fdb2\\\",,\\\"20px\\\",,,\\\"center\\\"]), 'func(x) = bind(x)(function1)(function2) ... (functionN)().pop()' ), \\n| h('br'),  \")}]);","extractedComments":[]}