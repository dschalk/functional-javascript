{"code":"!function(n){var e={};function t(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return n[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=e,t.d=function(n,e,i){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:i})},t.r=function(n){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(n,\"__esModule\",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&\"object\"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:n}),2&e&&\"string\"!=typeof n)for(var r in n)t.d(i,r,function(e){return n[e]}.bind(null,r));return i},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,\"a\",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p=\"\",t(t.s=0)}([function(n,e){throw new Error(\"Module parse failed: Unterminated string constant (1897:7)\\nYou may need an appropriate loader to handle this file type.\\n| h('a', {props: {href: \\\"#bind\\\" }}, ' Bind' ), \\n| h('span', ' bind(), created by running \\\"var bind = Bind(\\\"bind0\\\"), is one such function. bind() is an instance of bindo() that maintains its data in an array named \\\"Bind.bind0\\\". bindo() pushes bind()\\\\'s first argument, \\\"x\\\", (see below) into Bind.bind0 and returns debug8() which takes function1 as its argument and calls bindo() on function1(x). bindo() pushes function1(x) into Bind.bind0 and returns debug8(). This time, debug8 is called on function2 which calls bindo on function2(function1(x)). ' ), \\n> h('p', ' Recursion continues until there are no more functions or until (), null, or some variable equal to null is encountered. A final null value prompts debug8 to return the array of each function\\\\'s return value or pending Promise resolution value, which in this example is Bind.bind0. \\n| \\n| h('p', ' Left to right ordering of functions is unusual, but it is the least cumbersome way to implement Bind's recursive algorithm. A traditional function could be defined as: ' ),\")}]);","extractedComments":[]}