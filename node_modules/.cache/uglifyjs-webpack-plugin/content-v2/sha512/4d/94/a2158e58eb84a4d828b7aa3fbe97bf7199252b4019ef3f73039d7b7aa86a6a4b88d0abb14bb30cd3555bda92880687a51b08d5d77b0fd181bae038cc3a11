{"code":"!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=0)}([function(e,t){throw new Error(\"Module parse failed: Identifier directly after number (2102:45)\\nYou may need an appropriate loader to handle this file type.\\n| h('p', ' The \\\\\\\"functional programming\\\" buzz phrase means a variety of things to various teachers, authors, and bloggers. To me, it means what it literally appears to mean: programming with functions. I think it is unfortunate that \\\"functional programming\\\" is so frequently conflated with extraneous topics, most notabley pure functions and immutable objects. ' ), \\n| h('p', ' On this page, JavaScript (Ecmascript 2015) is used just as we find it. I am in no hurry to give up, for example, the efficiency and convenience of mutations inside the scopes of functions as: ' ),\\n> h('pre', {style: {color: green3, fontSize: 20px}},`               var ar = [x=>x**3, x=>x+3, x=>x**2]\\n| \\n|                const f = v => t => t.map(g=>v=g(v))\")}]);","extractedComments":[]}