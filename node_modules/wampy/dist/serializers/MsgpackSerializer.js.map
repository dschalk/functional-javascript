{"version":3,"sources":["../../src/serializers/MsgpackSerializer.js"],"names":["msgpack","MsgpackSerializer","protocol","isBinary","data","encode","Promise","type","constructor","name","resolve","decode","Uint8Array","reader","FileReader","onload","result","readAsArrayBuffer"],"mappings":";;;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,UAAU,wBAAhB;;IAEaC,iB,WAAAA,iB;AACT,iCAAe;AAAA;;AACX,aAAKC,QAAL,GAAgB,SAAhB;AACA,aAAKC,QAAL,GAAgB,IAAhB;AACH;;;;+BAEOC,I,EAAM;AACV,mBAAOJ,QAAQK,MAAR,CAAeD,IAAf,CAAP;AACH;;;+BAEOA,I,EAAM;AACV,mBAAO,IAAIE,OAAJ,CAAY,mBAAW;;AAE1B,oBAAMC,OAAOH,KAAKI,WAAL,CAAiBC,IAA9B;;AAEA,oBAAIF,SAAS,aAAT,IAA0BA,SAAS,QAAvC,EAAiD;AAC7CG,4BAAQV,QAAQW,MAAR,CAAe,IAAIC,UAAJ,CAAeR,IAAf,CAAf,CAAR;AACH,iBAFD,MAEO;AACH,wBAAMS,SAAS,IAAIC,UAAJ,EAAf;;AAEAD,2BAAOE,MAAP,GAAgB,YAAY;AACxBL,gCAAQV,QAAQW,MAAR,CAAe,IAAIC,UAAJ,CAAe,KAAKI,MAApB,CAAf,CAAR;AACH,qBAFD;;AAIAH,2BAAOI,iBAAP,CAAyBb,IAAzB;AACH;AAEJ,aAhBM,CAAP;AAiBH","file":"MsgpackSerializer.js","sourcesContent":["import msgpack5 from 'msgpack5';\n\nconst msgpack = msgpack5();\n\nexport class MsgpackSerializer {\n    constructor () {\n        this.protocol = 'msgpack';\n        this.isBinary = true;\n    }\n\n    encode (data) {\n        return msgpack.encode(data);\n    }\n\n    decode (data) {\n        return new Promise(resolve => {\n\n            const type = data.constructor.name;\n\n            if (type === 'ArrayBuffer' || type === 'Buffer') {\n                resolve(msgpack.decode(new Uint8Array(data)));\n            } else {\n                const reader = new FileReader();\n\n                reader.onload = function () {\n                    resolve(msgpack.decode(new Uint8Array(this.result)));\n                };\n\n                reader.readAsArrayBuffer(data);\n            }\n\n        });\n    }\n}\n"]}