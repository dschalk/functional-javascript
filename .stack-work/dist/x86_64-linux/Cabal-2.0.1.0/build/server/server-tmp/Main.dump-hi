
==================== FINAL INTERFACE ====================
2018-11-20 23:46:01.854695 UTC

interface main:Main 8022
  interface hash: c5f086a046b17357f963b41f064c696e
  ABI hash: 4c36b3a54218a338f79805085ce73946
  export-list hash: 6d6f083be24fae9adf13561d74c18b8c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d275b939ff388c19e2fbf23785abdc56
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.addClient
  Main.application
  Main.at
  Main.bcast
  Main.broadcast
  Main.certificate
  Main.changeGroup
  Main.changeGroupKeepScore
  Main.changeName
  Main.changeOne
  Main.chg6
  Main.chgScore
  Main.clientEq
  Main.clientExists
  Main.closeClientConn
  Main.com
  Main.comma
  Main.comma2
  Main.count_2
  Main.counter
  Main.dash
  Main.dollar
  Main.empty
  Main.emptyText
  Main.extract
  Main.extractHead
  Main.extractTail
  Main.false
  Main.findGroup
  Main.get2
  Main.get2G
  Main.get4
  Main.get5
  Main.getCli
  Main.getClient
  Main.getConn
  Main.getGroup
  Main.getN
  Main.getName
  Main.getNm
  Main.groupExists
  Main.head2
  Main.head3
  Main.key
  Main.log
  Main.main
  Main.mark
  Main.matches
  Main.matchesGroup
  Main.namesFile
  Main.newGroup
  Main.newGroupKeepScore
  Main.newId
  Main.newName
  Main.newServerState
  Main.nl
  Main.nobody
  Main.oh
  Main.player
  Main.removeClient
  Main.removeOne
  Main.rmClient
  Main.solo
  Main.staticApp
  Main.subState
  Main.tail2
  Main.tail3
  Main.talk
  Main.textState
  Main.toggle
  Main.true
  Main.unify
  Main.xcomments
  Main.xnames
  Main.Client
  Main.Comments
  Main.Goal
  Main.Group
  Main.Name
  Main.Password
  Main.Score
  Main.ServerState
module dependencies: Fm
package dependencies: OneTuple-0.2.2 SHA-1.6.4.4 appar-0.1.4
                      array-0.5.2.0 asn1-encoding-0.9.5 asn1-parse-0.9.4 asn1-types-0.3.2
                      async-2.1.1.1 attoparsec-0.13.2.2 auto-update-0.1.4 base-4.10.1.0
                      base64-bytestring-1.0.0.1 basement-0.0.7 binary-0.8.5.1
                      blaze-builder-0.4.1.0 blaze-html-0.9.1.1 blaze-markup-0.8.2.1
                      bsb-http-chunked-0.0.0.2 byteorder-1.0.4 bytestring-0.10.8.2
                      case-insensitive-1.2.0.11 cereal-0.5.5.0 clock-0.7.2
                      concurrent-extra-0.7.0.12 containers-0.5.10.2 cryptonite-0.25
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 directory-1.3.0.2
                      entropy-0.3.8 file-embed-0.0.10.1 filepath-1.4.1.2
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 hashable-1.2.7.0
                      hourglass-0.2.11 http-date-0.0.7 http-types-0.12.1 http2-1.6.3
                      integer-gmp-1.0.1.0 integer-logarithms-1.0.2.1 iproute-1.7.5
                      memory-0.14.16 mime-types-0.1.0.7 mtl-2.2.2 network-2.6.3.5
                      pem-0.2.4 pretty-1.1.3.3 primitive-0.6.4.0 psqueues-0.2.7.0
                      random-1.1 scientific-0.3.6.2 simple-sendfile-0.2.27 split-0.2.3.3
                      stm-2.4.5.0 streaming-commons-0.1.19 template-haskell-2.12.0.0
                      text-1.2.3.0 time-1.8.0.2 tls-1.4.1 tls-session-manager-0.0.0.2
                      transformers-0.5.2.0 tuple-0.3.0.2 unix-2.7.2.2 unix-compat-0.5.0.1
                      unordered-containers-0.2.9.0 vault-0.3.1.1 wai-3.2.1.2
                      wai-app-static-3.1.6.2 wai-websockets-3.0.1.2 warp-3.2.22
                      warp-tls-3.2.4.3 websockets-0.12.5.1 word8-0.1.3 x509-1.7.3
                      x509-store-1.6.6 x509-validation-1.6.10 zlib-0.6.2
orphans: basement-0.0.7:Basement.UArray.Base
         basement-0.0.7:Basement.Block stm-2.4.5.0:Control.Monad.STM
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         network-2.6.3.5:Network.Socket
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.7.0:Data.Hashable.Generic
         transformers-0.5.2.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats basement-0.0.7:Basement.Block.Base
                         basement-0.0.7:Basement.Monad
                         basement-0.0.7:Basement.MutableBuilder basement-0.0.7:Basement.Nat
                         basement-0.0.7:Basement.NonEmpty
                         basement-0.0.7:Basement.Numerical.Subtractive
                         basement-0.0.7:Basement.PrimType basement-0.0.7:Basement.String
                         basement-0.0.7:Basement.String.Encoding.ASCII7
                         basement-0.0.7:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.7:Basement.String.Encoding.UTF16
                         basement-0.0.7:Basement.String.Encoding.UTF32
                         basement-0.0.7:Basement.Types.OffsetSize
                         basement-0.0.7:Basement.UArray.Base
                         basement-0.0.7:Basement.UTF8.Base clock-0.7.2:System.Clock
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         cryptonite-0.25:Crypto.ECC cryptonite-0.25:Crypto.Error.Types
                         cryptonite-0.25:Crypto.Hash.Blake2
                         cryptonite-0.25:Crypto.Hash.Blake2b
                         cryptonite-0.25:Crypto.Hash.Blake2bp
                         cryptonite-0.25:Crypto.Hash.Blake2s
                         cryptonite-0.25:Crypto.Hash.Blake2sp
                         cryptonite-0.25:Crypto.Hash.Keccak cryptonite-0.25:Crypto.Hash.MD2
                         cryptonite-0.25:Crypto.Hash.MD4 cryptonite-0.25:Crypto.Hash.MD5
                         cryptonite-0.25:Crypto.Hash.RIPEMD160
                         cryptonite-0.25:Crypto.Hash.SHA1 cryptonite-0.25:Crypto.Hash.SHA224
                         cryptonite-0.25:Crypto.Hash.SHA256 cryptonite-0.25:Crypto.Hash.SHA3
                         cryptonite-0.25:Crypto.Hash.SHA384
                         cryptonite-0.25:Crypto.Hash.SHA512
                         cryptonite-0.25:Crypto.Hash.SHA512t
                         cryptonite-0.25:Crypto.Hash.SHAKE
                         cryptonite-0.25:Crypto.Hash.Skein256
                         cryptonite-0.25:Crypto.Hash.Skein512
                         cryptonite-0.25:Crypto.Hash.Tiger
                         cryptonite-0.25:Crypto.Hash.Whirlpool
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         iproute-1.7.5:Data.IP.Addr iproute-1.7.5:Data.IP.Range
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         zlib-0.6.2:Codec.Compression.Zlib.Stream
import  -/  base-4.10.1.0:Control.Concurrent 54b4f33006223552c60861a4a302d698
import  -/  base-4.10.1.0:Control.Concurrent.MVar d59f7bf8c22359a853225b02e3e23e9e
import  -/  base-4.10.1.0:Control.Exception c134ea327d158f2eebf26e12a1d4ad47
import  -/  base-4.10.1.0:Control.Exception.Base a0c09fb1722df56c4c26d548157007ca
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Control.Monad.IO.Class 9d78cd0f73a837f3c00753bd212b9f2c
import  -/  base-4.10.1.0:Data.Data c16c1b59ecdb12037d0296eaec32afef
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:Data.Typeable 3291e9b95e37ffc276f1f4c39c7b8372
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Conc.Sync 3cf9d980bef04043684377f638021935
import  -/  base-4.10.1.0:GHC.IO e261d8b68ccf81a359626fa520b57d1d
import  -/  base-4.10.1.0:GHC.IO.Handle 5f614cc041d5fa954b0de4d7c73104fe
import  -/  base-4.10.1.0:GHC.IO.Handle.FD e06fbff6d2dafa211cd5a82e8b1f2f2d
import  -/  base-4.10.1.0:GHC.IO.Unsafe 0aa7e5adc396c9f651baef415ce018da
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  base-4.10.1.0:Text.Read 9e862e012b3c71e83cb56fb456188f44
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal e154f5ecf6a3cd0a27df93e86ed481d7
import  -/  bytestring-0.10.8.2:Data.ByteString.Unsafe 5d17f041f2eb6e4f6434714de163dee9
import  -/  concurrent-extra-0.7.0.12:Control.Concurrent.STM.Lock 8d46781ecdd1ac619bbf8c774b496dde
import  -/  file-embed-0.0.10.1:Data.FileEmbed 42be5b4af1ba4f18894f4108d616f3fa
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
import  -/  Fm 27db9f19151c0e927a46f74c66deb462
  exports: 0314b60afb307a2c58318ed950e29f8a
  rM 1d8068198695d038f4049dc3191a8e69
  rText 41f87533d37e7d76a677e239078d8908
import  -/  random-1.1:System.Random 7425ef878fcdaaac7b607c0c2d51fc7c
import  -/  split-0.2.3.3:Data.List.Split d6f07f97ee293e86e1952e7427bfffa3
import  -/  split-0.2.3.3:Data.List.Split.Internals 07f8f22ebfb54f941d103ac266ac982b
import  -/  stm-2.4.5.0:Control.Concurrent.STM 3bb51322d75ab2fab7591237a88b8007
import  -/  text-1.2.3.0:Data.Text 0519455f2b04d2a7315c2959461dd14e
import  -/  text-1.2.3.0:Data.Text.IO 188a92c7440ca0a9142bc80960eb2d8d
import  -/  text-1.2.3.0:Data.Text.Internal 5d98ec4bb692174ed69de0b9299773d5
import  -/  text-1.2.3.0:Data.Text.Show e6e404e5ba6a54450a48a17eff2a219c
import  -/  tuple-0.3.0.2:Data.Tuple.Select 87c430650a19cc115ec5a28f5083abf2
import  -/  tuple-0.3.0.2:Data.Tuple.Update be36cf93e35a21b6b69d71e72581f61e
import  -/  wai-3.2.1.2:Network.Wai 3953218fc0211cf406d3a4bfb307e7a0
import  -/  wai-app-static-3.1.6.2:Network.Wai.Application.Static c5a6d0f808d87aafd49c8f815c702741
import  -/  wai-app-static-3.1.6.2:WaiAppStatic.Storage.Embedded.Runtime d1977dcd6ad432d798df42d5157aa3d7
import  -/  wai-websockets-3.0.1.2:Network.Wai.Handler.WebSockets fc17b9b7c919960d1c34dbc5955aaea7
import  -/  warp-3.2.22:Network.Wai.Handler.Warp f695ffc7e1d03318b98bea6cc67c86e3
import  -/  warp-3.2.22:Network.Wai.Handler.Warp.Run 3172d9aeb264844b29c36ffbab9e397e
import  -/  warp-3.2.22:Network.Wai.Handler.Warp.Settings 8e7e5651e3f349bbbdec4ca64f3eaa4e
import  -/  warp-tls-3.2.4.3:Network.Wai.Handler.WarpTLS 762686a1fd1878470a44612cd5de62f7
import  -/  websockets-0.12.5.1:Network.WebSockets 1286961f784f7b99388500014200c9c6
import  -/  websockets-0.12.5.1:Network.WebSockets.Connection 8262540f50cb244afdaec62324eda5b4
import  -/  websockets-0.12.5.1:Network.WebSockets.Connection.Options 6b9bda8a460ce20b30785bbe7f6c7135
import  -/  websockets-0.12.5.1:Network.WebSockets.Server 8c8caec90e318cac935a85c74b04eedd
import  -/  websockets-0.12.5.1:Network.WebSockets.Types 59036b6d3a2315aff9dc05efcc0a2683
addDependentFile "./cow/index.html"
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
f2dce415dbe2b1acab0111833073ce2e
  $wcloseClientConn ::
    Main.Client -> Main.ServerState -> a -> Main.ServerState
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(U,U,U),A,A,A,A,A,A,A)><L,1*U>, Inline: [0],
     Unfolding: (\ @ a (w :: Main.Client) (w1 :: Main.ServerState) ->
                 let {
                   s' :: Main.ServerState
                   = GHC.List.filter
                       @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                          Network.WebSockets.Connection.Connection, Main.Password,
                          GHC.Types.Int, Main.Comments)
                       (\ (x :: Main.Client) ->
                        case x of wild { (,,,,,,,) x1 ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                        case x1 of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                        case w of wild2 { (,,,,,,,) x2 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                        case x2 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.==# dt2 dt5) of wild4 {
                          GHC.Types.False -> GHC.Types.True
                          GHC.Types.True
                          -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                            -> GHC.Prim.Word#
                                                            -> GHC.Prim.ByteArray#
                                                            -> GHC.Prim.Word#
                                                            -> GHC.Prim.Word#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Int# #)}
                                    dt
                                    (GHC.Prim.int2Word# dt1)
                                    dt3
                                    (GHC.Prim.int2Word# dt4)
                                    (GHC.Prim.int2Word# dt2)
                                    GHC.Prim.realWorld# of wild5 { (#,#) ds18 ds19 ->
                             case GHC.Prim.narrow32Int# ds19 of wild6 {
                               DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } } } } } } })
                       w1
                 } in
                 \ (r1 :: a) -> s') -}
10892990a51adf60619626c91e20d302
  $wget2G ::
    (GHC.Num.Num b, GHC.Read.Read b) =>
    [GHC.Base.String] -> (# b, [b] #)
  {- Arity: 3,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><L,U(A,A,C(C1(U)),A)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Read.Read b)
                   (w2 :: [GHC.Base.String]) ->
                 case w2 of wild {
                   []
                   -> (# GHC.Num.fromInteger @ b w Main.get2G1,
                         GHC.Types.:
                           @ b
                           (GHC.Num.fromInteger @ b w Main.get2G1)
                           (GHC.Types.[] @ b) #)
                   : ds ds1
                   -> case ds1 of wild1 {
                        []
                        -> (# GHC.Num.fromInteger @ b w Main.get2G1,
                              GHC.Types.:
                                @ b
                                (GHC.Num.fromInteger @ b w Main.get2G1)
                                (GHC.Types.[] @ b) #)
                        : ds2 ds3
                        -> case ds3 of wild2 {
                             []
                             -> (# GHC.Num.fromInteger @ b w Main.get2G1,
                                   GHC.Types.:
                                     @ b
                                     (GHC.Num.fromInteger @ b w Main.get2G1)
                                     (GHC.Types.[] @ b) #)
                             : ds4 ds5
                             -> case ds5 of wild3 {
                                  []
                                  -> (# GHC.Num.fromInteger @ b w Main.get2G1,
                                        GHC.Types.:
                                          @ b
                                          (GHC.Num.fromInteger @ b w Main.get2G1)
                                          (GHC.Types.[] @ b) #)
                                  : ds6 ds7
                                  -> case ds7 of wild4 {
                                       []
                                       -> (# GHC.Num.fromInteger @ b w Main.get2G1,
                                             GHC.Types.:
                                               @ b
                                               (GHC.Num.fromInteger @ b w Main.get2G1)
                                               (GHC.Types.[] @ b) #)
                                       : ds8 ds9
                                       -> case ds9 of wild5 {
                                            []
                                            -> (# GHC.Num.fromInteger @ b w Main.get2G1,
                                                  GHC.Types.:
                                                    @ b
                                                    (GHC.Num.fromInteger @ b w Main.get2G1)
                                                    (GHC.Types.[] @ b) #)
                                            : ds10 ds11
                                            -> case ds11 of wild6 {
                                                 []
                                                 -> (# GHC.Num.fromInteger @ b w Main.get2G1,
                                                       GHC.Types.:
                                                         @ b
                                                         (GHC.Num.fromInteger @ b w Main.get2G1)
                                                         (GHC.Types.[] @ b) #)
                                                 : ds12 ds13
                                                 -> case ds13 of wild7 {
                                                      []
                                                      -> (# GHC.Num.fromInteger @ b w Main.get2G1,
                                                            GHC.Types.:
                                                              @ b
                                                              (GHC.Num.fromInteger
                                                                 @ b
                                                                 w
                                                                 Main.get2G1)
                                                              (GHC.Types.[] @ b) #)
                                                      : e ds14
                                                      -> case ds14 of wild8 {
                                                           []
                                                           -> (# GHC.Num.fromInteger
                                                                   @ b
                                                                   w
                                                                   Main.get2G1,
                                                                 GHC.Types.:
                                                                   @ b
                                                                   (GHC.Num.fromInteger
                                                                      @ b
                                                                      w
                                                                      Main.get2G1)
                                                                   (GHC.Types.[] @ b) #)
                                                           : f ds15
                                                           -> case ds15 of wild9 {
                                                                []
                                                                -> (# Text.Read.read @ b w1 e,
                                                                      GHC.Types.:
                                                                        @ b
                                                                        (Text.Read.read @ b w1 f)
                                                                        (GHC.Types.[] @ b) #)
                                                                : ipv ipv1
                                                                -> (# GHC.Num.fromInteger
                                                                        @ b
                                                                        w
                                                                        Main.get2G1,
                                                                      GHC.Types.:
                                                                        @ b
                                                                        (GHC.Num.fromInteger
                                                                           @ b
                                                                           w
                                                                           Main.get2G1)
                                                                        (GHC.Types.[]
                                                                           @ b) #) } } } } } } } } } }) -}
9b069431b7e96d98dbf4fe6a557e8487
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
facbb7af431ebda557cdc8ea5dce3bdd
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
ed8de8de3534e2bfd8324ecf02e53fc4
  $wsubState ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
         Data.Text.Internal.Text, Network.WebSockets.Connection.Connection,
         Data.Text.Internal.Text, GHC.Types.Int, Data.Text.Internal.Text)]
    -> [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
         Data.Text.Internal.Text, Network.WebSockets.Connection.Connection,
         Data.Text.Internal.Text, GHC.Types.Int, Data.Text.Internal.Text)]
  {- Arity: 5, Strictness: <L,U(U,U,U)><L,U><L,U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: Data.Text.Internal.Text)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
                            Data.Text.Internal.Text, Network.WebSockets.Connection.Connection,
                            Data.Text.Internal.Text, GHC.Types.Int,
                            Data.Text.Internal.Text)]) ->
                 case Main.solo of wild1 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 let {
                   $j :: [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
                           Data.Text.Internal.Text, Network.WebSockets.Connection.Connection,
                           Data.Text.Internal.Text, GHC.Types.Int, Data.Text.Internal.Text)]
                     <join 0>
                   = letrec {
                       go6 :: [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
                                Data.Text.Internal.Text, Network.WebSockets.Connection.Connection,
                                Data.Text.Internal.Text, GHC.Types.Int, Data.Text.Internal.Text)]
                              -> [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
                                   Data.Text.Internal.Text,
                                   Network.WebSockets.Connection.Connection,
                                   Data.Text.Internal.Text, GHC.Types.Int, Data.Text.Internal.Text)]
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ds :: [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
                                    Data.Text.Internal.Text,
                                    Network.WebSockets.Connection.Connection,
                                    Data.Text.Internal.Text, GHC.Types.Int,
                                    Data.Text.Internal.Text)]) ->
                         case ds of wild {
                           [] -> GHC.Types.[] @ Main.Client
                           : y ys
                           -> case y of wild2 { (,,,,,,,) a b c d e f g h ->
                              case d of wild3 { Data.Text.Internal.Text dt1 dt2 dt6 ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.==# ww2 dt6) of wild4 {
                                GHC.Types.False -> go6 ys
                                GHC.Types.True
                                -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.ByteArray#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                  -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.Prim.Int# #)}
                                          ww
                                          (GHC.Prim.int2Word# ww1)
                                          dt1
                                          (GHC.Prim.int2Word# dt2)
                                          (GHC.Prim.int2Word# ww2)
                                          GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                   case GHC.Prim.narrow32Int# ds3 of wild6 {
                                     DEFAULT -> go6 ys
                                     0#
                                     -> GHC.Types.:
                                          @ (Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
                                             Data.Text.Internal.Text,
                                             Network.WebSockets.Connection.Connection,
                                             Data.Text.Internal.Text, GHC.Types.Int,
                                             Data.Text.Internal.Text)
                                          wild2
                                          (go6 ys) } } } } } }
                     } in
                     go6 w1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww2 dt5) of wild2 {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> $j
                        0#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  ww
                                  (GHC.Prim.int2Word# ww1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# ww2)
                                  GHC.Prim.realWorld# of wild4 { (#,#) ds1 ds5 ->
                           case GHC.Prim.narrow32Int# ds5 of wild6 {
                             DEFAULT -> Main.subState1
                             0#
                             -> letrec {
                                  go6 :: [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
                                           Data.Text.Internal.Text,
                                           Network.WebSockets.Connection.Connection,
                                           Data.Text.Internal.Text, GHC.Types.Int,
                                           Data.Text.Internal.Text)]
                                         -> [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
                                              Data.Text.Internal.Text,
                                              Network.WebSockets.Connection.Connection,
                                              Data.Text.Internal.Text, GHC.Types.Int,
                                              Data.Text.Internal.Text)]
                                    {- Arity: 1, Strictness: <S,1*U> -}
                                  = \ (ds :: [(Data.Text.Internal.Text, GHC.Types.Int,
                                               GHC.Types.Int, Data.Text.Internal.Text,
                                               Network.WebSockets.Connection.Connection,
                                               Data.Text.Internal.Text, GHC.Types.Int,
                                               Data.Text.Internal.Text)]) ->
                                    case ds of wild7 {
                                      [] -> GHC.Types.[] @ Main.Client
                                      : y ys
                                      -> case y of wild8 { (,,,,,,,) a b c d e f g h ->
                                         case w of wild9 { Data.Text.Internal.Text dt dt1 dt2 ->
                                         case a of wild10 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                         case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.==# dt2 dt9) of wild11 {
                                           GHC.Types.False -> go6 ys
                                           GHC.Types.True
                                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                             -> GHC.Prim.Word#
                                                                             -> GHC.Prim.ByteArray#
                                                                             -> GHC.Prim.Word#
                                                                             -> GHC.Prim.Word#
                                                                             -> GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   GHC.Prim.Int# #)}
                                                     dt
                                                     (GHC.Prim.int2Word# dt1)
                                                     dt7
                                                     (GHC.Prim.int2Word# dt8)
                                                     (GHC.Prim.int2Word# dt2)
                                                     GHC.Prim.realWorld# of wild12 { (#,#) ds6 ds7 ->
                                              case GHC.Prim.narrow32Int# ds7 of wild13 {
                                                DEFAULT -> go6 ys
                                                0#
                                                -> GHC.Types.:
                                                     @ (Data.Text.Internal.Text, GHC.Types.Int,
                                                        GHC.Types.Int, Data.Text.Internal.Text,
                                                        Network.WebSockets.Connection.Connection,
                                                        Data.Text.Internal.Text, GHC.Types.Int,
                                                        Data.Text.Internal.Text)
                                                     wild8
                                                     (go6 ys) } } } } } } }
                                } in
                                go6 w1 } } } } } }) -}
d3f0ce0f6a855689ef2920c267daecc9
  $wtalk ::
    GHC.Types.IO ()
    -> GHC.Types.IO (GHC.Base.Maybe Network.WebSockets.Types.Message)
    -> ([Network.WebSockets.Types.Message] -> GHC.Types.IO ())
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Bool
    -> GHC.Conc.Sync.TVar Main.ServerState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,C(U(U,A))><C(S(SS)),C(U(U,1*U))><L,C(C1(U(U,A)))><S,U><L,U(U)><S,U>,
     Inline: [0] -}
423928cada01ce1aa0ff5c8320bb5084
  $wtoggle ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 case Main.true of wild1 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 let {
                   $j :: Data.Text.Internal.Text <join 0> {- Strictness: m -}
                   = case Main.false of wild2 { Data.Text.Internal.Text dt1 dt2 dt6 ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.==# ww2 dt6) of wild3 {
                       GHC.Types.False -> Main.toggle1
                       GHC.Types.True
                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                         -> GHC.Prim.Word#
                                                         -> GHC.Prim.ByteArray#
                                                         -> GHC.Prim.Word#
                                                         -> GHC.Prim.Word#
                                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               GHC.Prim.Int# #)}
                                 ww
                                 (GHC.Prim.int2Word# ww1)
                                 dt1
                                 (GHC.Prim.int2Word# dt2)
                                 (GHC.Prim.int2Word# ww2)
                                 GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                          case GHC.Prim.narrow32Int# ds3 of wild {
                            DEFAULT -> Main.toggle1 0# -> wild1 } } } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww2 dt5) of wild2 {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> $j 0# -> Main.false } } } }) -}
cfa1ccc25e8259f290d05795b8582ce9
  type Client =
    (Main.Name, Main.Score, Main.Goal, Main.Group,
     Network.WebSockets.Connection.Connection, Main.Password,
     GHC.Types.Int, Main.Comments)
d4156f0e20c6ec7b6cbe53fee67d5dc9
  type Comments = Data.Text.Internal.Text
5716697ddb4dcab965908708b8596ea9
  type Goal = GHC.Types.Int
ee3ae0124618ec4d4399ef494fcaded9
  type Group = Data.Text.Internal.Text
8163752d9413cc7064d29b86e40859d5
  type Name = Data.Text.Internal.Text
e71d421262d06fdebf8eaa17cb80630a
  type Password = Data.Text.Internal.Text
cb275e37b060fc7f44f14f5af4150e1d
  type Score = GHC.Types.Int
4d4cec7ef4363e44d6f2aa276f6d0e94
  type ServerState = [Main.Client]
f3f4b4b742c775f33ddf3f8dd8e1dbfd
  addClient :: Main.Client -> Main.ServerState -> Main.ServerState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.: @ Main.Client) -}
082a0237cf954c3e3e5d4a8e5b0edef6
  application ::
    GHC.Conc.Sync.TVar Main.ServerState
    -> Network.WebSockets.Server.ServerApp
  {- Arity: 3,
     Strictness: <L,U(U)><L,1*U(U(U,U,U,U,U),U(U,U,U),C(C1(U(U,A))),U(C(U(U,1*U)),C(C1(U(U,U))),U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.application1
                  `cast`
                (<GHC.Conc.Sync.TVar Main.ServerState>_R
                 ->_R <Network.WebSockets.Connection.PendingConnection>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
50552dda85994fbe8dc0212a8aabbef7
  application1 ::
    GHC.Conc.Sync.TVar Main.ServerState
    -> Network.WebSockets.Connection.PendingConnection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(U)><L,1*U(U(U,U,U,U,U),U(U,U,U),C(C1(U(U,A))),U(C(U(U,1*U)),C(C1(U(U,U))),U))><S,U> -}
18bfe2da8c549712a5a513b8df104e70
  at :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.at1) -}
21c120dda347c3aee8efc80ba02de567
  at1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<@>"#) -}
4576e34d3d8467c0d8c41341ece8b835
  bcast ::
    Data.Text.Internal.Text -> Main.ServerState -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.bcast1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <Main.ServerState>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8fdc0dcf85d40c1a865fe013dfb94494
  bcast1 ::
    Data.Text.Internal.Text
    -> Main.ServerState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,1*U><S,U>,
     Unfolding: (\ (message :: Data.Text.Internal.Text)
                   (clients :: Main.ServerState)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Data.Text.IO.appendFile2
                        GHC.IO.Handle.FD.stdout
                        message
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.$whPutChar
                        GHC.IO.Handle.FD.stdout
                        '\n'#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   lvl285 :: Data.ByteString.Lazy.Internal.ByteString
                   = Data.Text.Lazy.Encoding.encodeUtf8
                       (Data.Text.Lazy.fromChunks_go
                          (GHC.Types.:
                             @ Data.Text.Internal.Text
                             message
                             (GHC.Types.[] @ Data.Text.Internal.Text)))
                 } in
                 let {
                   lvl286 :: Network.WebSockets.Types.DataMessage
                   = Network.WebSockets.Types.Text
                       lvl285
                       (GHC.Base.Nothing @ Data.Text.Internal.Lazy.Text)
                 } in
                 let {
                   lvl287 :: Network.WebSockets.Types.Message
                   = Network.WebSockets.Types.DataMessage
                       GHC.Types.False
                       GHC.Types.False
                       GHC.Types.False
                       lvl286
                 } in
                 let {
                   lvl288 :: [Network.WebSockets.Types.Message]
                   = GHC.Types.:
                       @ Network.WebSockets.Types.Message
                       lvl287
                       (GHC.Types.[] @ Network.WebSockets.Types.Message)
                 } in
                 letrec {
                   go6 :: [Main.Client]
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [Main.Client])
                       (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case ds of wild {
                       [] -> (# eta, GHC.Tuple.() #)
                       : y ys
                       -> case y of wild1 { (,,,,,,,) ds3 ds4 ds5 ds6 conn ds7 ds8 ds9 ->
                          let {
                            $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                            = case conn of wild2 { Network.WebSockets.Connection.Connection ds10 ds11 ds12 ds13 dt ->
                              case GHC.Prim.writeMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Bool
                                     dt
                                     GHC.Types.True
                                     eta of s2# { DEFAULT ->
                              case (ds13 lvl288) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s2# of ds14 { (#,#) ipv4 ipv5 ->
                              go6 ys ipv4 } } }
                          } in
                          let {
                            $j1 :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                            = case conn of wild2 { Network.WebSockets.Connection.Connection ds10 ds11 ds12 ds13 dt ->
                              case (ds13 lvl288) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     eta of ds14 { (#,#) ipv4 ipv5 ->
                              go6 ys ipv4 } }
                          } in
                          letrec {
                            go7 :: [Network.WebSockets.Types.Message]
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds10 :: [Network.WebSockets.Types.Message]) ->
                              case ds10 of wild2 {
                                [] -> $j1
                                : y1 ys1
                                -> case y1 of wild3 {
                                     Network.WebSockets.Types.ControlMessage ds11
                                     -> case ds11 of wild4 {
                                          DEFAULT -> go7 ys1
                                          Network.WebSockets.Types.Close ds12 ds13 -> $j }
                                     Network.WebSockets.Types.DataMessage ipv4 ipv5 ipv6 ipv7
                                     -> go7 ys1 } }
                          } in
                          go7 lvl288 } }
                 } in
                 go6 clients ipv2 } }) -}
c83f626daf16d9218ff4018027a7edaa
  broadcast ::
    Data.Text.Internal.Text -> Main.ServerState -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.broadcast1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <Main.ServerState>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
28f9b37e46367720b175a4b949e5d968
  broadcast1 ::
    Data.Text.Internal.Text
    -> Main.ServerState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,1*U><S,U> -}
d64580757b5fafa976f9d29dcf038376
  certificate :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# Main.certificate1) -}
ff782a4ed809c13f584934aa2d4190d5
  certificate1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("certificate"#) -}
5b8f87f89da037915ef8f7a1e94fb683
  changeGroup ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> Main.ServerState -> Main.ServerState
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,U,U)><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (name :: Data.Text.Internal.Text)
                   (group :: Data.Text.Internal.Text)
                   (eta :: [Main.Client]) ->
                 GHC.Base.build
                   @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                      Network.WebSockets.Connection.Connection, Main.Password,
                      GHC.Types.Int, Main.Comments)
                   (\ @ b3
                      (c :: (Main.Name, Main.Score, Main.Goal, Main.Group,
                             Network.WebSockets.Connection.Connection, Main.Password,
                             GHC.Types.Int, Main.Comments)
                            -> b3 -> b3)[OneShot]
                      (n :: b3)[OneShot] ->
                    GHC.Base.foldr
                      @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                         Network.WebSockets.Connection.Connection, Main.Password,
                         GHC.Types.Int, Main.Comments)
                      @ b3
                      (GHC.Base.mapFB
                         @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                            Network.WebSockets.Connection.Connection, Main.Password,
                            GHC.Types.Int, Main.Comments)
                         @ b3
                         @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                            Network.WebSockets.Connection.Connection, Main.Password,
                            GHC.Types.Int, Main.Comments)
                         c
                         (Main.newGroup name group))
                      n
                      eta)) -}
148a30022f0f8aeb6be93e327f838512
  changeGroupKeepScore ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> Main.ServerState -> Main.ServerState
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,U,U)><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (name :: Data.Text.Internal.Text)
                   (group :: Data.Text.Internal.Text)
                   (eta :: [Main.Client]) ->
                 GHC.Base.build
                   @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                      Network.WebSockets.Connection.Connection, Main.Password,
                      GHC.Types.Int, Main.Comments)
                   (\ @ b3
                      (c :: (Main.Name, Main.Score, Main.Goal, Main.Group,
                             Network.WebSockets.Connection.Connection, Main.Password,
                             GHC.Types.Int, Main.Comments)
                            -> b3 -> b3)[OneShot]
                      (n :: b3)[OneShot] ->
                    GHC.Base.foldr
                      @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                         Network.WebSockets.Connection.Connection, Main.Password,
                         GHC.Types.Int, Main.Comments)
                      @ b3
                      (GHC.Base.mapFB
                         @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                            Network.WebSockets.Connection.Connection, Main.Password,
                            GHC.Types.Int, Main.Comments)
                         @ b3
                         @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                            Network.WebSockets.Connection.Connection, Main.Password,
                            GHC.Types.Int, Main.Comments)
                         c
                         (Main.newGroup name group))
                      n
                      eta)) -}
db13afa04c1d79f230e47ecca767f453
  changeName ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> Main.ServerState -> Main.ServerState
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,U,U)><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (name1 :: Data.Text.Internal.Text)
                   (name2 :: Data.Text.Internal.Text)
                   (s :: Main.ServerState) ->
                 GHC.Base.build
                   @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                      Network.WebSockets.Connection.Connection, Main.Password,
                      GHC.Types.Int, Main.Comments)
                   (\ @ b3
                      (c :: (Main.Name, Main.Score, Main.Goal, Main.Group,
                             Network.WebSockets.Connection.Connection, Main.Password,
                             GHC.Types.Int, Main.Comments)
                            -> b3 -> b3)[OneShot]
                      (n :: b3)[OneShot] ->
                    GHC.Base.foldr
                      @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                         Network.WebSockets.Connection.Connection, Main.Password,
                         GHC.Types.Int, Main.Comments)
                      @ b3
                      (GHC.Base.mapFB
                         @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                            Network.WebSockets.Connection.Connection, Main.Password,
                            GHC.Types.Int, Main.Comments)
                         @ b3
                         @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                            Network.WebSockets.Connection.Connection, Main.Password,
                            GHC.Types.Int, Main.Comments)
                         c
                         (Main.newName name1 name2))
                      n
                      s)) -}
733d14a22e7d50043a9c130d6df99f64
  changeOne :: GHC.Classes.Eq t => t -> t -> [t] -> [t]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U><L,U><S,1*U>,
     Unfolding: (\ @ t
                   ($dEq :: GHC.Classes.Eq t)
                   (eta :: t)
                   (eta1 :: t)
                   (eta2 :: [t]) ->
                 letrec {
                   changeOne1 :: t -> t -> [t] -> [t]
                     {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
                   = \ (ds :: t) (ds1 :: t) (ds2 :: [t]) ->
                     case ds2 of wild {
                       [] -> GHC.Types.[] @ t
                       : y ys
                       -> case GHC.Classes.== @ t $dEq ds1 y of wild1 {
                            GHC.Types.False -> GHC.Types.: @ t y (changeOne1 ds ds1 ys)
                            GHC.Types.True -> GHC.Types.: @ t ds ys } }
                 } in
                 changeOne1 eta eta1 eta2) -}
22473ce44f4e91511d3bec5ec19d8e0b
  changeOne_changeOne ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,1*U(U,U,U)><S,1*U> -}
e1e1de6d456e691f48fbb3b117df121a
  chg6 ::
    Data.Text.Internal.Text
    -> GHC.Types.Int -> GHC.Types.Int -> Main.Client -> Main.Client
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><L,U><L,U><S(S(LLS)LLLLLLL),1*U(U(U,U,U),U,U,U,U,U,U,U)>m,
     Unfolding: (\ (x :: Data.Text.Internal.Text)
                   (y :: GHC.Types.Int)
                   (z :: GHC.Types.Int)
                   (ds :: (Main.Name, Main.Score, Main.Goal, Main.Group,
                           Network.WebSockets.Connection.Connection, Main.Password,
                           GHC.Types.Int, Main.Comments)) ->
                 case ds of wild { (,,,,,,,) a b c d e f g h ->
                 case x of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case a of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# dt2 dt5) of wild3 {
                   GHC.Types.False -> wild
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild4 {
                        DEFAULT -> wild 0# -> (wild2, y, z, d, e, f, g, h) } } } } } }) -}
ca8d164b4c11919d3d68ff218afcb2cd
  chgScore ::
    Data.Text.Internal.Text
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Main.ServerState
    -> Main.ServerState
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U,U,U)><L,U><L,U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ (name :: Data.Text.Internal.Text)
                   (k :: GHC.Types.Int)
                   (q :: GHC.Types.Int)
                   (eta :: [Main.Client]) ->
                 GHC.Base.build
                   @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                      Network.WebSockets.Connection.Connection, Main.Password,
                      GHC.Types.Int, Main.Comments)
                   (\ @ b3
                      (c :: (Main.Name, Main.Score, Main.Goal, Main.Group,
                             Network.WebSockets.Connection.Connection, Main.Password,
                             GHC.Types.Int, Main.Comments)
                            -> b3 -> b3)[OneShot]
                      (n :: b3)[OneShot] ->
                    GHC.Base.foldr
                      @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                         Network.WebSockets.Connection.Connection, Main.Password,
                         GHC.Types.Int, Main.Comments)
                      @ b3
                      (GHC.Base.mapFB
                         @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                            Network.WebSockets.Connection.Connection, Main.Password,
                            GHC.Types.Int, Main.Comments)
                         @ b3
                         @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                            Network.WebSockets.Connection.Connection, Main.Password,
                            GHC.Types.Int, Main.Comments)
                         c
                         (Main.chg6 name k q))
                      n
                      eta)) -}
59ceb5f7002a7e7488f340482c239b58
  clientEq ::
    GHC.Classes.Eq a => (a, b, c, d, e, f, g) -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,A,A,A,A,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: (a, b, c, d, e, f, g))
                   (a1 :: a) ->
                 case ds of wild { (,,,,,,) a' b' c' d' e' f' g' ->
                 GHC.Classes.== @ a $dEq a1 a' }) -}
1d368b2115dc93abca845c4c6bd2ccb1
  clientExists ::
    Data.Text.Internal.Text -> Main.ServerState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Text.Internal.Text) (ss :: Main.ServerState) ->
                 case Main.matches a ss of wild {
                   [] -> GHC.Types.False : ds1 ds2 -> GHC.Types.True }) -}
04b778595298bfad49969a66c8b29df8
  closeClientConn ::
    Network.WebSockets.Types.WebSocketsData a =>
    Main.Client -> Main.ServerState -> a -> Main.ServerState
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U(U,U,U),A,A,A,A,A,A,A)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: Network.WebSockets.Types.WebSocketsData a)
                   (w1 :: Main.Client)
                   (w2 :: Main.ServerState) ->
                 Main.$wcloseClientConn @ a w1 w2) -}
5b07ef58d17ac7b3855b0399253b1e94
  com :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.com1) -}
babc6b2b0d491904ecf04a7db7c315d7
  com1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (","#) -}
1baacaaea50aef0a2588f2fe1adaebf1
  comma :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.comma1) -}
91f69f114b01f8f36d716b83a1c39f6d
  comma1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", "#) -}
9139795ce109b34cd2998edea5a9fa9b
  comma2 :: Data.Text.Internal.Text
  {- Unfolding: (Main.com) -}
47e6afc8c9dd89121dc2ab674e87d99b
  count_1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("count_2"#) -}
29288a9b9e7940c5925b14c0546438e2
  count_2 :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# Main.count_1) -}
a5c8f5b82f5a55ca96259e9bd96639cd
  counter ::
    GHC.Conc.Sync.STM (GHC.Conc.Sync.TVar GHC.Integer.Type.Integer)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.counter1
                  `cast`
                (Sym (GHC.Conc.Sync.N:STM[0]
                          <GHC.Conc.Sync.TVar GHC.Integer.Type.Integer>_R)) -}
627f825ff0e50769e612a9909eb65ee4
  counter1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Conc.Sync.TVar GHC.Integer.Type.Integer #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s1# :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.newTVar#
                        @ GHC.Integer.Type.Integer
                        @ GHC.Prim.RealWorld
                        Main.counter2
                        s1# of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Conc.Sync.TVar @ GHC.Integer.Type.Integer ipv1 #) }) -}
48ea956c7b6f94a39443376c4a8d9f4a
  counter2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
8c08fa9c433dc730a08861506f907995
  dash :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.dash1) -}
b86984219e08c79604d757b4379a7dbb
  dash1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-"#) -}
18150c491eb4bde58431d2f8cd6c0bb1
  dollar :: Data.Text.Internal.Text
  {- Unfolding: (Main.mark) -}
4b0ce38631a91faad995f48419bf4dc2
  empty :: Data.Text.Internal.Text
  {- Unfolding: InlineRule (0, True, True)
                Data.Text.Internal.empty_ -}
cbe52d5089113e9e8c47bb25b7fe7474
  emptyText :: Data.Text.Internal.Text
  {- Unfolding: InlineRule (0, True, True)
                Data.Text.Internal.empty_ -}
b37315eaee1183dfd825f700d038e127
  extract :: [Data.Text.Internal.Text] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [Data.Text.Internal.Text]) ->
                 case ds of wild {
                   [] -> Data.Text.Internal.empty
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> x : ipv ipv1 -> Data.Text.Internal.empty } }) -}
a6228cc98e7a846d7dff5c354f88d5f8
  extractHead :: [Data.Text.Internal.Text] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Data.Text.Internal.Text]) ->
                 case ds of wild {
                   [] -> Main.extractHead1
                   : a ds1
                   -> case ds1 of wild1 {
                        [] -> Main.extractHead1
                        : b ds2
                        -> case ds2 of wild2 {
                             [] -> a : ipv ipv1 -> Main.extractHead1 } } }) -}
612de9e677d311608ab6c65eb7876084
  extractHead1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.extractHead2) -}
97cddcc9864c6ee0a505accac6420f4f
  extractHead2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Error. ExtractHead is being applied to something other than a two item list of Text"#) -}
7452f71835603b9ce34618564bdc47f3
  extractTail :: [Data.Text.Internal.Text] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Data.Text.Internal.Text]) ->
                 case ds of wild {
                   [] -> Main.extractTail1
                   : a ds1
                   -> case ds1 of wild1 {
                        [] -> Main.extractTail1
                        : b ds2
                        -> case ds2 of wild2 {
                             [] -> b : ipv ipv1 -> Main.extractTail1 } } }) -}
cb5be5e4187c135c8690d94a05cea007
  extractTail1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.extractTail2) -}
e4a63c5ffd1107dc896eb0a66dc6efec
  extractTail2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Error. ExtractTail is being applied to something other than a two item list of Text"#) -}
aeca1fe4298037fe2ab0f3d52e554f48
  false :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.false1) -}
a21c797d8963a79cf0b9612d39272b9f
  false1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("false"#) -}
0bd649e7712a82d8856cd5f757a26185
  findGroup :: Main.Client -> Main.Group
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Main.Name, Main.Score, Main.Goal, Main.Group,
                           Network.WebSockets.Connection.Connection, Main.Password,
                           GHC.Types.Int, Main.Comments)) ->
                 case ds of wild { (,,,,,,,) ds1 ds2 ds3 d ds4 ds5 ds6 ds7 ->
                 d }) -}
767bc46c8646907fee2ba4bb41b15959
  get1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.get3) -}
3837270505671a077febf4a53546f501
  get10 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
4aa6a41e258059dcb9f6aa4d86b1ecd3
  get11 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ GHC.Types.Int Main.get14 Main.get12) -}
14ebd945c92e9992f60af82ddfa79cc2
  get12 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ GHC.Types.Int Main.get14 Main.get13) -}
4d674a6b8ec278709f16fa306b0276a0
  get13 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.get14
                   (GHC.Types.[] @ GHC.Types.Int)) -}
8eede7748807c2b971b8e65a64e5d01b
  get14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
b8673cf6abad29b7b65809e6c1523228
  get15 :: GHC.Base.String -> GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Double
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Double
                           Main.get18
                           s) of wild {
                   [] -> Main.get17
                   : x ds
                   -> case ds of wild1 { [] -> x : ipv ipv1 -> Main.get16 } }) -}
9cf99f031c6d85000fcc09d66eb339cf
  get16 :: GHC.Types.Double
  {- Strictness: x -}
a78b2dbeea9f2de89ca94b3580679d50
  get17 :: GHC.Types.Double
  {- Strictness: x -}
4645cb1315002e15d27659a58b835d68
  get18 :: Text.ParserCombinators.ReadP.P GHC.Types.Double
  {- Unfolding: (GHC.Read.$fReadDouble_$sreadNumber
                   GHC.Read.$fReadDouble_$sconvertFrac
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Double
                   (Text.Read.readEither7 @ GHC.Types.Double)) -}
346cf673445215b944f94b8d54821da7
  get19 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.get23
                   Main.get20) -}
efca2c1c44f0404c708fab711c8732d2
  get2 :: [GHC.Base.String] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> Main.get1
                   : ds1 ds2
                   -> case ds2 of wild1 {
                        [] -> Main.get1
                        : ds3 ds4
                        -> case ds4 of wild2 {
                             [] -> Main.get1
                             : ds5 ds6
                             -> case ds6 of wild3 {
                                  [] -> Main.get1
                                  : ds7 ds8
                                  -> case ds8 of wild4 {
                                       [] -> Main.get1
                                       : ds9 ds10
                                       -> case ds10 of wild5 {
                                            [] -> Main.get1
                                            : ds11 ds12
                                            -> case ds12 of wild6 {
                                                 [] -> Main.get1
                                                 : ds13 ds14
                                                 -> case ds14 of wild7 {
                                                      [] -> Main.get1
                                                      : e ds15
                                                      -> case ds15 of wild8 {
                                                           [] -> Main.get1
                                                           : f ds16
                                                           -> case ds16 of wild9 {
                                                                []
                                                                -> Data.Text.concat
                                                                     (GHC.Types.:
                                                                        @ Data.Text.Internal.Text
                                                                        (case GHC.Magic.runRW#
                                                                                @ ('GHC.Types.TupleRep
                                                                                     '['GHC.Types.TupleRep
                                                                                         '[],
                                                                                       'GHC.Types.LiftedRep])
                                                                                @ (# GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld,
                                                                                     Data.Text.Internal.Text #)
                                                                                (\ (s1 :: GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld)[OneShot] ->
                                                                                 case GHC.Prim.newByteArray#
                                                                                        @ GHC.Prim.RealWorld
                                                                                        10#
                                                                                        s1 of ds17 { (#,#) ipv ipv1 ->
                                                                                 Main.$wouter1
                                                                                   ipv1
                                                                                   4#
                                                                                   e
                                                                                   0#
                                                                                   ipv }) of ds17 { (#,#) ipv ipv1 ->
                                                                         ipv1 })
                                                                        (Main.get2_go1
                                                                           (GHC.Types.:
                                                                              @ Data.Text.Internal.Text
                                                                              (case GHC.Magic.runRW#
                                                                                      @ ('GHC.Types.TupleRep
                                                                                           '['GHC.Types.TupleRep
                                                                                               '[],
                                                                                             'GHC.Types.LiftedRep])
                                                                                      @ (# GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld,
                                                                                           Data.Text.Internal.Text #)
                                                                                      (\ (s1 :: GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld)[OneShot] ->
                                                                                       case GHC.Prim.newByteArray#
                                                                                              @ GHC.Prim.RealWorld
                                                                                              10#
                                                                                              s1 of ds17 { (#,#) ipv ipv1 ->
                                                                                       Main.$wouter
                                                                                         ipv1
                                                                                         4#
                                                                                         f
                                                                                         0#
                                                                                         ipv }) of ds17 { (#,#) ipv ipv1 ->
                                                                               ipv1 })
                                                                              (GHC.Types.[]
                                                                                 @ Data.Text.Internal.Text))))
                                                                : ipv ipv1
                                                                -> Main.get1 } } } } } } } } } }) -}
16961e2e2f9370022def1cd224cbff43
  get20 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.get23
                   Main.get21) -}
5f0cc82662ec128028e8c9a9209b1d47
  get21 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.get23
                   Main.get22) -}
43af5f7502d04355e86cc2988aa58b36
  get22 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.get23
                   (GHC.Types.[] @ GHC.Types.Double)) -}
040dfb7ba1b01f1d10e54b5534596b79
  get23 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# -1.0##) -}
666d5d0580bc0271cbcd4ef0c6d922eb
  get2G ::
    (GHC.Num.Num b, GHC.Read.Read b) => [GHC.Base.String] -> [b]
  {- Arity: 3,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><L,U(A,A,C(C1(U)),A)><S,1*U>m2,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Read.Read b)
                   (w2 :: [GHC.Base.String]) ->
                 case Main.$wget2G @ b w w1 w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ b ww1 ww2 }) -}
66cea707c313217c3fb5f8ba9f88b0f9
  get2G1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8888) -}
76650b3532dd4db181370285846daf35
  get2_go1 :: [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U> -}
78c0517812d06f5f15cc11716f82c77d
  get3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("error in get2"#) -}
e08baa57522815a5dd038ab9eed27595
  get4 :: [GHC.Base.String] -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Base.String]) ->
                 case w of wild {
                   [] -> GHC.Types.: @ GHC.Types.Int Main.get14 Main.get11
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Types.: @ GHC.Types.Int Main.get14 Main.get11
                        : ds2 ds3
                        -> case ds3 of wild2 {
                             [] -> GHC.Types.: @ GHC.Types.Int Main.get14 Main.get11
                             : ds4 ds5
                             -> case ds5 of wild3 {
                                  [] -> GHC.Types.: @ GHC.Types.Int Main.get14 Main.get11
                                  : a ds6
                                  -> case ds6 of wild4 {
                                       [] -> GHC.Types.: @ GHC.Types.Int Main.get14 Main.get11
                                       : b ds7
                                       -> case ds7 of wild5 {
                                            [] -> GHC.Types.: @ GHC.Types.Int Main.get14 Main.get11
                                            : c ds8
                                            -> case ds8 of wild6 {
                                                 []
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Int
                                                      Main.get14
                                                      Main.get11
                                                 : d ds9
                                                 -> case ds9 of wild7 {
                                                      []
                                                      -> GHC.Types.:
                                                           @ GHC.Types.Int
                                                           Main.get14
                                                           Main.get11
                                                      : ds10 ds11
                                                      -> case ds11 of wild8 {
                                                           []
                                                           -> GHC.Types.:
                                                                @ GHC.Types.Int
                                                                Main.get14
                                                                Main.get11
                                                           : ds12 ds13
                                                           -> case ds13 of wild9 {
                                                                []
                                                                -> GHC.Types.:
                                                                     @ GHC.Types.Int
                                                                     (Main.get7 a)
                                                                     (GHC.Types.:
                                                                        @ GHC.Types.Int
                                                                        (Main.get7 b)
                                                                        (GHC.Types.:
                                                                           @ GHC.Types.Int
                                                                           (Main.get7 c)
                                                                           (GHC.Types.:
                                                                              @ GHC.Types.Int
                                                                              (Main.get7 d)
                                                                              (GHC.Types.[]
                                                                                 @ GHC.Types.Int))))
                                                                : ipv ipv1
                                                                -> GHC.Types.:
                                                                     @ GHC.Types.Int
                                                                     Main.get14
                                                                     Main.get11 } } } } } } } } } }) -}
dd9caedf149f8616cd0384aca1d621f9
  get5 :: [GHC.Base.String] -> [GHC.Types.Double]
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Base.String]) ->
                 case w of wild {
                   [] -> GHC.Types.: @ GHC.Types.Double Main.get23 Main.get19
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Types.: @ GHC.Types.Double Main.get23 Main.get19
                        : ds2 ds3
                        -> case ds3 of wild2 {
                             [] -> GHC.Types.: @ GHC.Types.Double Main.get23 Main.get19
                             : ds4 ds5
                             -> case ds5 of wild3 {
                                  [] -> GHC.Types.: @ GHC.Types.Double Main.get23 Main.get19
                                  : a ds6
                                  -> case ds6 of wild4 {
                                       [] -> GHC.Types.: @ GHC.Types.Double Main.get23 Main.get19
                                       : b ds7
                                       -> case ds7 of wild5 {
                                            []
                                            -> GHC.Types.: @ GHC.Types.Double Main.get23 Main.get19
                                            : c ds8
                                            -> case ds8 of wild6 {
                                                 []
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Double
                                                      Main.get23
                                                      Main.get19
                                                 : d ds9
                                                 -> case ds9 of wild7 {
                                                      []
                                                      -> GHC.Types.:
                                                           @ GHC.Types.Double
                                                           Main.get23
                                                           Main.get19
                                                      : e ds10
                                                      -> case ds10 of wild8 {
                                                           []
                                                           -> GHC.Types.:
                                                                @ GHC.Types.Double
                                                                (Main.get15 a)
                                                                (GHC.Types.:
                                                                   @ GHC.Types.Double
                                                                   (Main.get15 b)
                                                                   (GHC.Types.:
                                                                      @ GHC.Types.Double
                                                                      (Main.get15 c)
                                                                      (GHC.Types.:
                                                                         @ GHC.Types.Double
                                                                         (Main.get15 d)
                                                                         (GHC.Types.:
                                                                            @ GHC.Types.Double
                                                                            (Main.get15 e)
                                                                            (GHC.Types.[]
                                                                               @ GHC.Types.Double)))))
                                                           : ipv ipv1
                                                           -> GHC.Types.:
                                                                @ GHC.Types.Double
                                                                Main.get23
                                                                Main.get19 } } } } } } } } }) -}
96f992ad59b4754138c1906781d0aa09
  get7 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Main.get10
                           s) of wild {
                   [] -> Main.get9
                   : x ds
                   -> case ds of wild1 { [] -> x : ipv ipv1 -> Main.get8 } }) -}
274d459b25de004379a68bb6b9bb0af5
  get8 :: GHC.Types.Int
  {- Strictness: x -}
a6b4e07afd1a0cecacf7f568d993c241
  get9 :: GHC.Types.Int
  {- Strictness: x -}
e2059409ce952cabaaef2fb4ff2d3233
  getCli ::
    (Data.Tuple.Select.Sel1 a2 a1, GHC.Classes.Eq a1) =>
    a1 -> a2 -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ a1
                   ($dSel1 :: Data.Tuple.Select.Sel1 a1 a)
                   ($dEq :: GHC.Classes.Eq a)
                   (name :: a)
                   (cli :: a1) ->
                 GHC.Classes.==
                   @ a
                   $dEq
                   ($dSel1 `cast` (Data.Tuple.Select.N:Sel1[0] <a1>_N <a>_N) cli)
                   name) -}
619bd538aea3ac597977640b978b5f62
  getClient ::
    (GHC.Classes.Eq a2, Data.Tuple.Select.Sel1 a1 a2) =>
    a2 -> [a1] -> [a1]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,C(U)><L,U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ a1
                   ($dEq :: GHC.Classes.Eq a1)
                   ($dSel1 :: Data.Tuple.Select.Sel1 a a1)
                   (name :: a1)
                   (state :: [a]) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ a
                      @ b
                      (GHC.List.filterFB
                         @ a
                         @ b
                         c
                         (Main.getCli @ a1 @ a $dSel1 $dEq name))
                      n
                      state)) -}
b0fd789f8e1243d9242c8bc6c8147a0c
  getConn :: Main.Client -> Network.WebSockets.Connection.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                (Data.Tuple.Select.$fSel5(,,,,,,,)a5_$csel5
                   @ Data.Text.Internal.Text
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   @ Data.Text.Internal.Text
                   @ Network.WebSockets.Connection.Connection
                   @ Data.Text.Internal.Text
                   @ GHC.Types.Int
                   @ Data.Text.Internal.Text) -}
b3cb21533b5aa96ef534de1055789cb1
  getGroup ::
    GHC.Classes.Eq a =>
    a
    -> [(a, b, c, Data.Text.Internal.Text, e, f, g, h)]
    -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ e
                   @ f
                   @ g
                   @ h
                   ($dEq :: GHC.Classes.Eq a)
                   (name :: a)
                   (state :: [(a, b, c, Data.Text.Internal.Text, e, f, g, h)]) ->
                 letrec {
                   go6 :: [(a, b, c, Data.Text.Internal.Text, e, f, g, h)]
                          -> [Data.Text.Internal.Text]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(a, b, c, Data.Text.Internal.Text, e, f, g, h)]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Data.Text.Internal.Text
                       : y ys
                       -> case y of wild1 { (,,,,,,,) a1 ds1 ds2 d ds3 ds4 ds5 ds6 ->
                          case GHC.Classes.== @ a $dEq name a1 of wild2 {
                            GHC.Types.False -> go6 ys
                            GHC.Types.True
                            -> GHC.Types.: @ Data.Text.Internal.Text d (go6 ys) } } }
                 } in
                 case go6 state of wild {
                   [] -> Data.Text.Internal.empty
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Data.Text.Internal.empty } }) -}
523310f06dd2c5cbc3e0a626316ac66b
  getGroup_$sgetGroup ::
    Data.Text.Internal.Text
    -> [(Data.Text.Internal.Text, b, c, Data.Text.Internal.Text, e, f,
         g, h)]
    -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: (\ @ b
                   @ c
                   @ e
                   @ f
                   @ g
                   @ h
                   (name :: Data.Text.Internal.Text)
                   (state :: [(Data.Text.Internal.Text, b, c, Data.Text.Internal.Text,
                               e, f, g, h)]) ->
                 letrec {
                   go6 :: [(Data.Text.Internal.Text, b, c, Data.Text.Internal.Text, e,
                            f, g, h)]
                          -> [Data.Text.Internal.Text]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Data.Text.Internal.Text, b, c,
                                Data.Text.Internal.Text, e, f, g, h)]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Data.Text.Internal.Text
                       : y ys
                       -> case y of wild1 { (,,,,,,,) a ds1 ds2 d ds3 ds4 ds5 ds6 ->
                          case name of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                          case a of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# dt2 dt5) of wild4 {
                            GHC.Types.False -> go6 ys
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      dt
                                      (GHC.Prim.int2Word# dt1)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# dt2)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds7 ds8 ->
                               case GHC.Prim.narrow32Int# ds8 of wild6 {
                                 DEFAULT -> go6 ys
                                 0#
                                 -> GHC.Types.: @ Data.Text.Internal.Text d (go6 ys) } } } } } } }
                 } in
                 case go6 state of wild {
                   [] -> Data.Text.Internal.empty
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Data.Text.Internal.empty } }) -}
76d2ebd5973cd683a7a7cb816360ea2e
  getN :: [Main.Client] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [Main.Client]) ->
                 case ds of wild {
                   [] -> Main.getN2
                   : ds1 ds2
                   -> case ds1 of wild1 { (,,,,,,,) a ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                      case ds2 of wild2 { [] -> a : ipv ipv1 -> Main.getN1 } } }) -}
582f66b38a3d7bd28419d50147aa028b
  getN1 :: Data.Text.Internal.Text
  {- Strictness: x -}
e4f3d75a8f59ceb3fb705980675e82a9
  getN2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.getN3) -}
32f91a26d5c9248b58293c79a3ea0cb9
  getN3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Mr. Nobody"#) -}
35a9e6aff71c29d256f580cc0cca01b4
  getName :: Main.Client -> Data.Text.Internal.Text
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                (Data.Tuple.Select.$fSel1(,,,,,,,)a1_$csel1
                   @ Data.Text.Internal.Text
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   @ Data.Text.Internal.Text
                   @ Network.WebSockets.Connection.Connection
                   @ Data.Text.Internal.Text
                   @ GHC.Types.Int
                   @ Data.Text.Internal.Text) -}
fe4440cdc81dd44b328d54ce9116de9d
  getNm ::
    (Data.Tuple.Select.Sel1 a2 a3, Data.Tuple.Select.Sel7 a2 a1,
     GHC.Classes.Eq a1) =>
    a1 -> [a2] -> a3
  {- Arity: 5,
     Strictness: <C(S),C(U)><L,C(U)><S(C(C(S))L),U(C(C1(U)),A)><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ a1
                   @ a2
                   ($dSel1 :: Data.Tuple.Select.Sel1 a1 a2)
                   ($dSel7 :: Data.Tuple.Select.Sel7 a1 a)
                   ($dEq :: GHC.Classes.Eq a)
                   (id :: a)
                   (s :: [a1]) ->
                 letrec {
                   go6 :: [a1] -> a2 <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a1]) ->
                     case ds of wild {
                       [] -> GHC.List.badHead @ a2
                       : y ys
                       -> case GHC.Classes.==
                                 @ a
                                 $dEq
                                 ($dSel7 `cast` (Data.Tuple.Select.N:Sel7[0] <a1>_N <a>_N) y)
                                 id of wild1 {
                            GHC.Types.False -> go6 ys
                            GHC.Types.True
                            -> $dSel1 `cast` (Data.Tuple.Select.N:Sel1[0] <a1>_N <a2>_N) y } }
                 } in
                 go6 s) -}
9a8833a69de476ba2da785f97ee49ee0
  groupExists ::
    Data.Text.Internal.Text -> Main.ServerState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Text.Internal.Text) (ss :: Main.ServerState) ->
                 case Main.matchesGroup a ss of wild {
                   [] -> GHC.Types.False : ds1 ds2 -> GHC.Types.True }) -}
909548c320d026432f2eb697a08fd665
  head1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.head5) -}
17536a89dc34a77ccc8bfe9bc6d39683
  head2 :: [Data.Text.Internal.Text] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Data.Text.Internal.Text]) ->
                 case ds of wild {
                   [] -> Main.head1
                   : a ds1
                   -> case ds1 of wild1 {
                        [] -> Main.head1
                        : b ds2
                        -> case ds2 of wild2 { [] -> a : ipv ipv1 -> Main.head1 } } }) -}
86db87848d04f58d4adbfbc4446ab15c
  head3 :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> Main.head6
                   : a ds1
                   -> case ds1 of wild1 {
                        [] -> Main.head6
                        : b ds2
                        -> case ds2 of wild2 { [] -> a : ipv ipv1 -> Main.head6 } } }) -}
af053a8d158925d839faa16547336838
  head5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Inappropriate head2 argument"#) -}
de89fabf0b5fde3620e3598942bde60c
  head6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# Main.head5) -}
a8f5da2ecd59d2cb292ee79194d1cffb
  key :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# Main.key1) -}
7bc72ec6dbced1e2522c06073d04b4e8
  key1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("key"#) -}
be65ca724d133fe4d8ea9fa4f2fc02eb
  log :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# Main.log1) -}
15df30e1112486daf55589715a94e636
  log1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("log"#) -}
d57e0f4a088d77ee2bbc7a471d7326aa
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
1ca2a77c07753704e42b6b9c49c1fe92
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main15
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.atomically#
                        @ (GHC.Conc.Sync.TVar Main.ServerState)
                        Main.main14
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Network.Wai.Handler.Warp.Run.run2
                   Main.main11
                   (let {
                      app :: Network.WebSockets.Connection.PendingConnection
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        {- Arity: 2 -}
                      = Main.application1 ipv3
                    } in
                    \ (req :: Network.Wai.Internal.Request)
                      (sendResponse :: Network.Wai.Internal.Response
                                       -> GHC.Types.IO
                                            Network.Wai.Internal.ResponseReceived)[OneShot] ->
                    case req of ww { Network.Wai.Internal.Request ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                    case Network.Wai.Handler.WebSockets.$wwebsocketsApp
                           Network.WebSockets.Connection.Options.defaultConnectionOptions
                           app
                             `cast`
                           (<Network.WebSockets.Connection.PendingConnection>_R
                            ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                           ww3
                           ww4
                           ww5
                           ww6 of wild {
                      GHC.Base.Nothing
                      -> Network.Wai.Application.Static.staticApp
                           Main.main2
                           ww
                           sendResponse
                      GHC.Base.Just res -> sendResponse res } })
                   ipv2 } }) -}
f62831257647e4d0ed26887737340a31
  main10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("index.html"#) -}
f8042698519414d2bd54f9fa9da0a765
  main11 :: Network.Wai.Handler.Warp.Settings.Settings
  {- Unfolding: (Network.Wai.Handler.Warp.Settings.Settings
                   Main.main13
                   Network.Wai.Handler.Warp.Settings.defaultSettings16
                   Network.Wai.Handler.Warp.Settings.defaultOnException1
                     `cast`
                   (<GHC.Base.Maybe Network.Wai.Internal.Request>_R
                    ->_R <GHC.Exception.SomeException>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultOnExceptionResponse
                   Network.Wai.Handler.Warp.Settings.defaultSettings15
                     `cast`
                   (<Network.Socket.Types.SockAddr>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings14
                     `cast`
                   (<Network.Socket.Types.SockAddr>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Main.main12
                   (GHC.Base.Nothing @ Network.Wai.Handler.Warp.Timeout.Manager)
                   Network.Wai.Handler.Warp.Settings.defaultSettings12
                   Network.Wai.Handler.Warp.Settings.defaultSettings12
                   Network.Wai.Handler.Warp.Settings.defaultSettings11
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings10
                     `cast`
                   (<(forall a. GHC.Types.IO a -> GHC.Types.IO a)
                     -> GHC.Types.IO ()>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   GHC.Types.False
                   Network.Wai.Handler.Warp.Settings.defaultSettings9
                     `cast`
                   (<GHC.Types.IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings6
                   Network.Wai.Handler.Warp.Settings.defaultSettings4
                   Network.Wai.Handler.Warp.Settings.ProxyProtocolNone
                   Network.Wai.Handler.Warp.Settings.defaultSettings3
                   GHC.Types.True
                   Network.Wai.Handler.Warp.Settings.defaultSettings2
                     `cast`
                   (<Network.Wai.Internal.Request>_R
                    ->_R <Network.HTTP.Types.Status.Status>_R
                    ->_R <GHC.Base.Maybe GHC.Integer.Type.Integer>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings1
                     `cast`
                   (<Network.Wai.Internal.Request>_R
                    ->_R <Data.ByteString.Internal.ByteString>_R
                    ->_R <GHC.Integer.Type.Integer>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
3e1cc7663b38839e996fa1c4dffc447e
  main12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 36000#) -}
4d23209c4e80a1bca27c2f93296ef30d
  main13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3055#) -}
eb2dbc1ecb34f68d3869ad160829c650
  main14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Conc.Sync.TVar Main.ServerState #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s1# :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ Main.ServerState
                        @ GHC.Prim.RealWorld
                        (GHC.Types.[] @ Main.Client)
                        s1# of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Conc.Sync.TVar @ Main.ServerState ipv1 #) }) -}
f7e3d304729475b1d376c2edf312fb79
  main15 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main16) -}
4dbe0d7a66052dfe70217e21975c1ef0
  main16 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (GHC.CString.unpackCString# Main.main17)
                   GHC.Show.$fShow[]1) -}
78844df826a00a9e1bfa4761050112f5
  main17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("In main"#) -}
8cd10d92b3de6a04f681e3f20e13894f
  main18 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
9265e4acb51d4b8e88bd1a80a98ff1bf
  main2 :: WaiAppStatic.Types.StaticSettings
  {- Unfolding: (case WaiAppStatic.Storage.Embedded.Runtime.embeddedSettings3 of wild { WaiAppStatic.Types.StaticSettings ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 WaiAppStatic.Types.StaticSettings
                   Main.main3
                     `cast`
                   (<WaiAppStatic.Types.Pieces>_R
                    ->_R Sym (GHC.Types.N:IO[0] <WaiAppStatic.Types.LookupResult>_R))
                   ds1
                   ds2
                   ds3
                   ds4
                   ds5
                   ds6
                   ds7
                   ds8
                   ds9 }) -}
03aa897350bd3a2730dba3a43cd5b330
  main3 ::
    WaiAppStatic.Types.Pieces
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          WaiAppStatic.Types.LookupResult #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (pieces :: WaiAppStatic.Types.Pieces)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta,
                    WaiAppStatic.Storage.Embedded.Runtime.embeddedSettings_elookup
                      pieces
                      Main.main_root #)) -}
55121ebfbc1b9353aa7558c6856815dc
  main4 :: [(GHC.IO.FilePath, Data.ByteString.Internal.ByteString)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.IO.FilePath, Data.ByteString.Internal.ByteString)
                   Main.main5
                   (GHC.Types.[]
                      @ (GHC.IO.FilePath, Data.ByteString.Internal.ByteString))) -}
197db5fb4316d8078096b717545423bf
  main5 :: ([GHC.Types.Char], Data.ByteString.Internal.ByteString)
  {- Strictness: m, Unfolding: ((Main.main9, Main.main6)) -}
b4eaab95252df41e6e1a69f38bf8c6f6
  main6 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.ByteString.Internal.ByteString #)
                        Main.main7 of ds { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6222b1f6445d8025fca70e8d43fdc1b3
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Internal.ByteString #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.noDuplicate#
                        @ GHC.Prim.RealWorld
                        s of s' { DEFAULT ->
                 case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        s' of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.ByteString.Internal.PS
                      Main.main8
                      (GHC.ForeignPtr.PlainForeignPtr ipv1)
                      0#
                      301# #) } }) -}
06a2f68d44226c9aeaf5bbd578609034
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("<!DOCTYPE html>\n\
                 \<html>\n\
                 \  <head>\n\
                 \    <meta charset=\"utf-8\" />\n\
                 \    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0\">\n\
                 \    <title>WebSocket Server</title>\n\
                 \  </head>\n\
                 \  <body>\n\
                 \    <div><h1><br><br><br><center>Server up and running</center></h1></div>\n\
                 \</body>\n\
                 \</html>\n"#) -}
7f9ba93a675e8cc2cb10994ba4a7d245
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main10) -}
a511aa6e91ce1dc6eae73a1432578426
  main_root :: WaiAppStatic.Storage.Embedded.Runtime.Embedded
  {- Unfolding: (WaiAppStatic.Storage.Embedded.Runtime.embeddedSettings_go
                   (GHC.Base.map
                      @ ([GHC.Types.Char], Data.ByteString.Internal.ByteString)
                      @ ([WaiAppStatic.Types.Piece], Data.ByteString.Internal.ByteString)
                      WaiAppStatic.Storage.Embedded.Runtime.embeddedSettings1
                      Main.main4)) -}
b0d149f12e97c25fc4e51d36c58b56bb
  mark :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.mark1) -}
bb74774427bbb51aaacf40427563b689
  mark1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<$>"#) -}
87129bc7cbda9b671dfef5e95f872bbe
  matches ::
    Data.Text.Internal.Text -> Main.ServerState -> [Main.Client]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: (\ (a :: Data.Text.Internal.Text)
                   (ss :: Main.ServerState) ->
                 letrec {
                   go6 :: [Main.Client] -> [Main.Client]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Main.Client]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Main.Client
                       : y ys
                       -> case y of wild1 { (,,,,,,,) x ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                          case x of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                          case a of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# dt2 dt5) of wild4 {
                            GHC.Types.False -> go6 ys
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      dt
                                      (GHC.Prim.int2Word# dt1)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# dt2)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild6 {
                                 DEFAULT -> go6 ys
                                 0# -> GHC.Types.: @ Main.Client wild1 (go6 ys) } } } } } } }
                 } in
                 go6 ss) -}
bcfbc75d5b4c38f31bcb762ec8c60649
  matchesGroup ::
    Data.Text.Internal.Text -> Main.ServerState -> [Main.Client]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: (\ (a :: Data.Text.Internal.Text)
                   (ss :: Main.ServerState) ->
                 letrec {
                   go6 :: [Main.Client] -> [Main.Client]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Main.Client]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Main.Client
                       : y ys
                       -> case y of wild1 { (,,,,,,,) ds1 ds2 ds3 d ds4 ds5 ds6 ds7 ->
                          case d of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                          case a of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# dt2 dt5) of wild4 {
                            GHC.Types.False -> go6 ys
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      dt
                                      (GHC.Prim.int2Word# dt1)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# dt2)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds8 ds9 ->
                               case GHC.Prim.narrow32Int# ds9 of wild6 {
                                 DEFAULT -> go6 ys
                                 0# -> GHC.Types.: @ Main.Client wild1 (go6 ys) } } } } } } }
                 } in
                 go6 ss) -}
ff56823929a108c96a7941c5e43ec180
  namesFile :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# Main.namesFile1) -}
406b13147c375ce38333f39522f05004
  namesFile1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("namesFile"#) -}
3eaf2f1abfd6ceb14a0b1cbd86d893b0
  newGroup ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> Main.Client -> Main.Client
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><L,U><S(S(LLS)LLLLLLL),1*U(U(U,U,U),U,U,U,U,U,U,U)>m,
     Unfolding: (\ (name :: Data.Text.Internal.Text)
                   (group :: Data.Text.Internal.Text)
                   (ds :: (Main.Name, Main.Score, Main.Goal, Main.Group,
                           Network.WebSockets.Connection.Connection, Main.Password,
                           GHC.Types.Int, Main.Comments)) ->
                 case ds of wild { (,,,,,,,) a b c d e f g h ->
                 case name of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case a of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# dt2 dt5) of wild3 {
                   GHC.Types.False -> wild
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild4 {
                        DEFAULT -> wild
                        0# -> (wild2, b, c, group, e, f, g, h) } } } } } }) -}
5075e8ec8801a11fed082f1b9ba89ee5
  newGroupKeepScore ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> Main.Client -> Main.Client
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><L,U><S(S(LLS)LLLLLLL),1*U(U(U,U,U),U,U,U,U,U,U,U)>m,
     Unfolding: (Main.newGroup) -}
7a2ea432d97486c2960b3018b982e5d4
  newId :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
699d4fd8bb1855c2127e0e04f5fe1708
  newName ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> Main.Client -> Main.Client
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><L,U><S(S(LLS)LLLLLLL),1*U(U(U,U,U),U,U,U,U,U,U,U)>m,
     Unfolding: (\ (name1 :: Data.Text.Internal.Text)
                   (name2 :: Data.Text.Internal.Text)
                   (ds :: (Main.Name, Main.Score, Main.Goal, Main.Group,
                           Network.WebSockets.Connection.Connection, Main.Password,
                           GHC.Types.Int, Main.Comments)) ->
                 case ds of wild { (,,,,,,,) a b c d e f g h ->
                 case name1 of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case a of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# dt2 dt5) of wild3 {
                   GHC.Types.False -> wild
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild4 {
                        DEFAULT -> wild 0# -> (name2, b, c, d, e, f, g, h) } } } } } }) -}
d8a674f7a090a7d2dfc75c17526d3500
  newServerState :: Main.ServerState
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.[] @ Main.Client) -}
345579c406d0415a2d813be9b9237065
  nl :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.nl1) -}
7914c0c8c13b2827d8a1ef8f9ffb9869
  nl1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
d62b83c54e52c91c6430bec342ec75d8
  nobody :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.nobody1) -}
fb4290088e829000c42a46181db837ce
  nobody1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("nobody"#) -}
aaa8f7b3139ed0557c88fc5e08d02f84
  oh :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.oh1) -}
5ed4cdab212bde845fe7108f7724b808
  oh1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<o>"#) -}
a8680be32a35d7f461904283cf56af62
  player ::
    GHC.Conc.Sync.STM (GHC.Conc.Sync.TVar Data.Text.Internal.Text)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.player1
                  `cast`
                (Sym (GHC.Conc.Sync.N:STM[0]
                          <GHC.Conc.Sync.TVar Data.Text.Internal.Text>_R)) -}
61cb0c1076dc9df93d15dc872af28d18
  player1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Conc.Sync.TVar Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (GHC.Conc.Sync.newTVar1
                   @ Data.Text.Internal.Text
                   Main.nobody) -}
6f437b133f7ddf5689d506054ff1b9b5
  removeClient :: Main.Client -> Main.ServerState -> Main.ServerState
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(U,U,U),A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: (\ (name :: Main.Client) (eta :: [Main.Client]) ->
                 GHC.List.filter
                   @ (Main.Name, Main.Score, Main.Goal, Main.Group,
                      Network.WebSockets.Connection.Connection, Main.Password,
                      GHC.Types.Int, Main.Comments)
                   (\ (x :: Main.Client) ->
                    case x of wild { (,,,,,,,) x1 ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    case x1 of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                    case name of wild2 { (,,,,,,,) x2 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                    case x2 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.==# dt2 dt5) of wild4 {
                      GHC.Types.False -> GHC.Types.True
                      GHC.Types.True
                      -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                        -> GHC.Prim.Word#
                                                        -> GHC.Prim.ByteArray#
                                                        -> GHC.Prim.Word#
                                                        -> GHC.Prim.Word#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.Int# #)}
                                dt
                                (GHC.Prim.int2Word# dt1)
                                dt3
                                (GHC.Prim.int2Word# dt4)
                                (GHC.Prim.int2Word# dt2)
                                GHC.Prim.realWorld# of wild5 { (#,#) ds18 ds19 ->
                         case GHC.Prim.narrow32Int# ds19 of wild6 {
                           DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } } } } } } })
                   eta) -}
24ec42d81e5ddadd83eb04513d90372c
  removeOne :: GHC.Classes.Eq t => t -> [t] -> [t]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U><S,1*U>,
     Unfolding: (\ @ t
                   ($dEq :: GHC.Classes.Eq t)
                   (eta :: t)
                   (eta1 :: [t]) ->
                 letrec {
                   removeOne1 :: t -> [t] -> [t]
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (ds :: t) (ds1 :: [t]) ->
                     case ds1 of wild {
                       [] -> GHC.Types.[] @ t
                       : y ys
                       -> case GHC.Classes.== @ t $dEq ds y of wild1 {
                            GHC.Types.False -> GHC.Types.: @ t y (removeOne1 ds ys)
                            GHC.Types.True -> ys } }
                 } in
                 removeOne1 eta eta1) -}
28e359e4d3e71ad8985a5c516c6d4926
  removeOne_removeOne ::
    Data.Text.Internal.Text
    -> [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U,U,U)><S,1*U> -}
cd1305bfc916470e08cc52539f4a19a7
  rmClient :: Main.Name -> Main.ServerState -> Main.ServerState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: (\ (name :: Main.Name) (state :: Main.ServerState) ->
                 letrec {
                   go6 :: [Main.Client] -> [Main.Client]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Main.Client]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Main.Client
                       : y ys
                       -> case y of wild1 { (,,,,,,,) x ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                          case x of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                          case name of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# dt2 dt5) of wild4 {
                            GHC.Types.False -> GHC.Types.: @ Main.Client wild1 (go6 ys)
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      dt
                                      (GHC.Prim.int2Word# dt1)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# dt2)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild6 {
                                 DEFAULT -> GHC.Types.: @ Main.Client wild1 (go6 ys)
                                 0# -> go6 ys } } } } } } }
                 } in
                 go6 state) -}
d05555cab9162b33d333df27690a6194
  solo :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.solo1) -}
893ed360cd9395e04fed7a5ea64196c8
  solo1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("solo"#) -}
840d7a14777d5f45bd89b864ac0d3a2b
  staticApp :: Network.Wai.Application
  {- Arity: 2,
     Unfolding: (Network.Wai.Application.Static.staticApp Main.main2) -}
a9a2300bc5b1df8d0d7ac016105337d3
  subState ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
         Data.Text.Internal.Text, Network.WebSockets.Connection.Connection,
         Data.Text.Internal.Text, GHC.Types.Int, Data.Text.Internal.Text)]
    -> [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
         Data.Text.Internal.Text, Network.WebSockets.Connection.Connection,
         Data.Text.Internal.Text, GHC.Types.Int, Data.Text.Internal.Text)]
  {- Arity: 3, Strictness: <L,U(U,U,U)><S(SSS),1*U(U,U,U)><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Text.Internal.Text)
                   (w2 :: [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
                            Data.Text.Internal.Text, Network.WebSockets.Connection.Connection,
                            Data.Text.Internal.Text, GHC.Types.Int,
                            Data.Text.Internal.Text)]) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wsubState w ww1 ww2 ww3 w2 }) -}
09da79c91c6d32b428b1e4e4ed23dbf5
  subState1 ::
    [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int,
      Data.Text.Internal.Text, Network.WebSockets.Connection.Connection,
      Data.Text.Internal.Text, GHC.Types.Int, Data.Text.Internal.Text)]
  {- Strictness: x -}
271bfffb7377ea25242cb3f7eec1b00b
  tail1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.tail5) -}
90f4f4f4751af1004d0aa861574d609d
  tail2 :: [Data.Text.Internal.Text] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Data.Text.Internal.Text]) ->
                 case ds of wild {
                   [] -> Main.tail1
                   : a ds1
                   -> case ds1 of wild1 {
                        [] -> Main.tail1
                        : b ds2
                        -> case ds2 of wild2 { [] -> b : ipv ipv1 -> Main.tail1 } } }) -}
288aa0c56f1b76a41f7e69731512317a
  tail3 :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> Main.tail6
                   : a ds1
                   -> case ds1 of wild1 {
                        [] -> Main.tail6
                        : b ds2
                        -> case ds2 of wild2 { [] -> b : ipv ipv1 -> Main.tail6 } } }) -}
efa0381d710e8b84fe9454276380fbf2
  tail5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Inappropriate tail2 argument"#) -}
566d99386717818cb0977d801019b590
  tail6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# Main.tail5) -}
58bb9801e16d45ce6500eebce4d672e6
  talk ::
    Network.WebSockets.Connection.Connection
    -> GHC.Conc.Sync.TVar Main.ServerState
    -> Main.Client
    -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S(S(SLLLL)LC(S(SS))SS),1*U(U(C(U(U,A)),A,A,A,A),A,C(U(U,1*U)),C(C1(U(U,A))),U)><L,U(U)><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.talk1
                  `cast`
                (<Network.WebSockets.Connection.Connection>_R
                 ->_R <GHC.Conc.Sync.TVar Main.ServerState>_R
                 ->_R <Main.Client>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1ef9b376940a00dcba3b310a6787214a
  talk1 ::
    Network.WebSockets.Connection.Connection
    -> GHC.Conc.Sync.TVar Main.ServerState
    -> Main.Client
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S(S(SLLLL)LC(S(SS))SS),1*U(U(C(U(U,A)),A,A,A,A),A,C(U(U,1*U)),C(C1(U(U,A))),U)><L,U(U)><L,A><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Network.WebSockets.Connection.Connection)
                   (w1 :: GHC.Conc.Sync.TVar Main.ServerState)
                   (w2 :: Main.Client)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Network.WebSockets.Connection.Connection ww1 ww2 ww3 ww4 ww5 ->
                 case ww1 of ww6 { Network.WebSockets.Connection.Options.ConnectionOptions ww7 ww8 ww9 ww10 ww11 ->
                 Main.$wtalk ww7 ww3 ww4 ww5 w1 w3 } }) -}
8ed92e342525b5bea057fd8b997b4871
  textState ::
    (GHC.Show.Show a2, GHC.Show.Show a1) =>
    [(Data.Text.Internal.Text, a1, a2, d, e, f, g, h)]
    -> [Data.Text.Internal.Text]
  {- Arity: 3, Strictness: <L,U(A,C(U),A)><L,U(A,C(U),A)><S,1*U> -}
f9e34dcdb17a19da123ec3aac540c135
  textState1 ::
    [(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int, d, e, f,
      g, h)]
    -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U> -}
128c41c2e3e25855224960ed9b40ee47
  toggle :: Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wtoggle ww1 ww2 ww3 }) -}
b9f81f98c41d7074fe59861005090e82
  toggle1 :: Data.Text.Internal.Text
  {- Strictness: x -}
6f3a65b65e818800d764aa03b4459b74
  true :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.true1) -}
2adf0fb91985cbbfded48e258351f790
  true1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("true"#) -}
6b5a3f62b670df0b816964f1025ecfb8
  unify :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.List.filter @ GHC.Types.Char Main.unify1) -}
5e7dbd8d44e5d90cfbb6d8a566532284
  unify1 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (v :: GHC.Types.Char) ->
                 case v of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.True '\n'# -> GHC.Types.False } }) -}
54c2ad23e21b2a4087036a0f74c6377f
  xcomments :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# Main.xcomments1) -}
7a5cabf38acfb7521475b0fce6bfca8c
  xcomments1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("xcomments"#) -}
6cefa20a4204c521a4301c5b37190d83
  xnames :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# Main.xnames1) -}
8b1db7f8ae38faad3c7b0fa716eb24c2
  xnames1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("xnames"#) -}
"SPEC getGroup @ Text _ _ _ _ _ _" forall @ b
                                          @ c
                                          @ e
                                          @ f
                                          @ g
                                          @ h
                                          ($dEq :: GHC.Classes.Eq Data.Text.Internal.Text)
  Main.getGroup @ Data.Text.Internal.Text
                @ b
                @ c
                @ e
                @ f
                @ g
                @ h
                $dEq
  = Main.getGroup_$sgetGroup @ b @ c @ e @ f @ g @ h
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

