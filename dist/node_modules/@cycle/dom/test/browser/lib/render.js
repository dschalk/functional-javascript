"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var xstream_1 = require("xstream");
var run_1 = require("@cycle/run");
var snabbdomJSX = require("snabbdom-jsx");
var index_1 = require("../../../lib/cjs/index");
var html = snabbdomJSX.html;
if (isIE10) {
    window.MutationObserver = require('mutation-observer');
}
function createRenderTarget(id) {
    if (id === void 0) { id = null; }
    var element = document.createElement('div');
    element.className = 'cycletest';
    if (id) {
        element.id = id;
    }
    document.body.appendChild(element);
    return element;
}
describe('DOM Rendering', function () {
    it('should render DOM elements even when DOMSource is not utilized', function (done) {
        function main() {
            return {
                DOM: xstream_1.default.of(index_1.div('.my-render-only-container', [
                    index_1.h2('Cycle.js framework'),
                ])),
            };
        }
        run_1.run(main, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        });
        setTimeout(function () {
            var myContainer = document.querySelector('.my-render-only-container');
            assert.notStrictEqual(myContainer, null);
            assert.notStrictEqual(typeof myContainer, 'undefined');
            assert.strictEqual(myContainer.tagName, 'DIV');
            var header = myContainer.querySelector('h2');
            assert.notStrictEqual(header, null);
            assert.notStrictEqual(typeof header, 'undefined');
            assert.strictEqual(header.textContent, 'Cycle.js framework');
            done();
        }, 150);
    });
    it('should support snabbdom dataset module by default', function (done) {
        var thisBrowserSupportsDataset = typeof document.createElement('DIV').dataset !== 'undefined';
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.my-class', {
                    dataset: { foo: 'Foo' },
                })),
            };
        }
        if (!thisBrowserSupportsDataset) {
            done();
        }
        else {
            var _a = run_1.setup(app, {
                DOM: index_1.makeDOMDriver(createRenderTarget()),
            }), sinks = _a.sinks, sources = _a.sources, run_2 = _a.run;
            var dispose_1;
            sources.DOM.select(':root').element().drop(1).take(1).addListener({
                next: function (root) {
                    var elem = root.querySelector('.my-class');
                    assert.notStrictEqual(elem, null);
                    assert.notStrictEqual(typeof elem, 'undefined');
                    assert.strictEqual(elem.tagName, 'DIV');
                    assert.strictEqual(elem.dataset['foo'], 'Foo');
                    setTimeout(function () {
                        dispose_1();
                        done();
                    });
                },
            });
            dispose_1 = run_2();
        }
    });
    it('should render in a DocumentFragment as container', function (done) {
        if (isIE10) {
            done();
            return;
        }
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.select('.my-class', [
                    index_1.option({ attrs: { value: 'foo' } }, 'Foo'),
                    index_1.option({ attrs: { value: 'bar' } }, 'Bar'),
                    index_1.option({ attrs: { value: 'baz' } }, 'Baz'),
                ])),
            };
        }
        var docfrag = document.createDocumentFragment();
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(docfrag),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM.select(':root').element().drop(1).take(1).addListener({
            next: function (root) {
                var selectEl = root.querySelector('.my-class');
                assert.notStrictEqual(selectEl, null);
                assert.notStrictEqual(typeof selectEl, 'undefined');
                assert.strictEqual(selectEl.tagName, 'SELECT');
                var options = selectEl.querySelectorAll('option');
                assert.strictEqual(options.length, 3);
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should convert a simple virtual-dom <select> to DOM element', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.select('.my-class', [
                    index_1.option({ attrs: { value: 'foo' } }, 'Foo'),
                    index_1.option({ attrs: { value: 'bar' } }, 'Bar'),
                    index_1.option({ attrs: { value: 'baz' } }, 'Baz'),
                ])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM.select(':root').element().drop(1).take(1).addListener({
            next: function (root) {
                var selectEl = root.querySelector('.my-class');
                assert.notStrictEqual(selectEl, null);
                assert.notStrictEqual(typeof selectEl, 'undefined');
                assert.strictEqual(selectEl.tagName, 'SELECT');
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should convert a simple virtual-dom <select> (JSX) to DOM element', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(html("select", { className: 'my-class' },
                    html("option", { value: 'foo' }, "Foo"),
                    html("option", { value: 'bar' }, "Bar"),
                    html("option", { value: 'baz' }, "Baz"))),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM.select(':root').element().drop(1).take(1).addListener({
            next: function (root) {
                var selectEl = root.querySelector('.my-class');
                assert.notStrictEqual(selectEl, null);
                assert.notStrictEqual(typeof selectEl, 'undefined');
                assert.strictEqual(selectEl.tagName, 'SELECT');
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should reuse existing DOM tree under the given root element', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.select('.my-class', [
                    index_1.option({ attrs: { value: 'foo' } }, 'Foo'),
                    index_1.option({ attrs: { value: 'bar' } }, 'Bar'),
                    index_1.option({ attrs: { value: 'baz' } }, 'Baz'),
                ])),
            };
        }
        // Create DOM tree with 2 <option>s under <select>
        var rootElem = createRenderTarget();
        var selectElem = document.createElement('SELECT');
        selectElem.className = 'my-class';
        rootElem.appendChild(selectElem);
        var optionElem1 = document.createElement('OPTION');
        optionElem1.setAttribute('value', 'foo');
        optionElem1.textContent = 'Foo';
        selectElem.appendChild(optionElem1);
        var optionElem2 = document.createElement('OPTION');
        optionElem2.setAttribute('value', 'bar');
        optionElem2.textContent = 'Bar';
        selectElem.appendChild(optionElem2);
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(rootElem),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM.select(':root').element().drop(1).take(1).addListener({
            next: function (root) {
                assert.strictEqual(root.childNodes.length, 1);
                var selectEl = root.childNodes[0];
                assert.strictEqual(selectEl.tagName, 'SELECT');
                assert.strictEqual(selectEl.childNodes.length, 3);
                var option1 = selectEl.childNodes[0];
                var option2 = selectEl.childNodes[1];
                var option3 = selectEl.childNodes[2];
                assert.strictEqual(option1.tagName, 'OPTION');
                assert.strictEqual(option2.tagName, 'OPTION');
                assert.strictEqual(option3.tagName, 'OPTION');
                assert.strictEqual(option1.textContent, 'Foo');
                assert.strictEqual(option2.textContent, 'Bar');
                assert.strictEqual(option3.textContent, 'Baz');
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should give elements as a value-over-time', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.merge(xstream_1.default.of(index_1.h2('.value-over-time', 'Hello test')), xstream_1.default.never()),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        var firstSubscriberRan = false;
        var secondSubscriberRan = false;
        var element$ = sources.DOM.select(':root').element();
        element$.drop(1).take(1).addListener({
            next: function (root) {
                assert.strictEqual(firstSubscriberRan, false);
                firstSubscriberRan = true;
                var header = root.querySelector('.value-over-time');
                assert.notStrictEqual(header, null);
                assert.notStrictEqual(typeof header, 'undefined');
                assert.strictEqual(header.tagName, 'H2');
            },
        });
        setTimeout(function () {
            // This samples the element$ after 400ms, and should synchronously get
            // some element into the subscriber.
            assert.strictEqual(secondSubscriberRan, false);
            element$.take(1).addListener({
                next: function (root) {
                    assert.strictEqual(secondSubscriberRan, false);
                    secondSubscriberRan = true;
                    var header = root.querySelector('.value-over-time');
                    assert.notStrictEqual(header, null);
                    assert.notStrictEqual(typeof header, 'undefined');
                    assert.strictEqual(header.tagName, 'H2');
                    setTimeout(function () {
                        dispose();
                        done();
                    });
                },
            });
            assert.strictEqual(secondSubscriberRan, true);
        }, 400);
        dispose = run();
    });
    it('should have DevTools flag in elements source stream', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.merge(xstream_1.default.of(index_1.h2('.value-over-time', 'Hello test')), xstream_1.default.never()),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var element$ = sources.DOM.select(':root').elements();
        assert.strictEqual(element$._isCycleSource, 'DOM');
        done();
    });
    it('should have DevTools flag in element source stream', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.merge(xstream_1.default.of(index_1.h2('.value-over-time', 'Hello test')), xstream_1.default.never()),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var element$ = sources.DOM.select(':root').element();
        assert.strictEqual(element$._isCycleSource, 'DOM');
        done();
    });
    it('should allow snabbdom Thunks in the VTree', function (done) {
        function renderThunk(greeting) {
            return index_1.h4('Constantly ' + greeting);
        }
        // The Cycle.js app
        function app(sources) {
            return {
                DOM: xstream_1.default.periodic(10).take(5).map(function (i) {
                    return index_1.div([
                        index_1.thunk('h4', 'key1', renderThunk, ['hello' + 0]),
                    ]);
                }),
            };
        }
        // Run it
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        // Assert it
        sources.DOM.select(':root').element().drop(1).take(1).addListener({
            next: function (root) {
                var h4Elem = root.querySelector('h4');
                assert.notStrictEqual(h4Elem, null);
                assert.notStrictEqual(typeof h4Elem, 'undefined');
                assert.strictEqual(h4Elem.tagName, 'H4');
                assert.strictEqual(h4Elem.textContent, 'Constantly hello0');
                dispose();
                done();
            },
        });
        dispose = run();
    });
    it('should render embedded HTML within SVG <foreignObject>', function (done) {
        var thisBrowserSupportsForeignObject = document.implementation
            .hasFeature('www.http://w3.org/TR/SVG11/feature#Extensibility', '1.1');
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.svg({ attrs: { width: 150, height: 50 } }, [
                    index_1.svg.foreignObject({ attrs: { width: '100%', height: '100%' } }, [
                        index_1.p('.embedded-text', 'This is HTML embedded in SVG'),
                    ]),
                ])),
            };
        }
        if (!thisBrowserSupportsForeignObject) {
            done();
        }
        else {
            // Run it
            var _a = run_1.setup(app, {
                DOM: index_1.makeDOMDriver(createRenderTarget()),
            }), sinks = _a.sinks, sources = _a.sources, run_3 = _a.run;
            var dispose_2;
            // Make assertions
            sources.DOM.select(':root').element().drop(1).take(1).addListener({
                next: function (root) {
                    var embeddedHTML = root.querySelector('p.embedded-text');
                    assert.strictEqual(embeddedHTML.namespaceURI, 'http://www.w3.org/1999/xhtml');
                    assert.notStrictEqual(embeddedHTML.clientWidth, 0);
                    assert.notStrictEqual(embeddedHTML.clientHeight, 0);
                    setTimeout(function () {
                        dispose_2();
                        done();
                    });
                },
            });
            dispose_2 = run_3();
        }
    });
    it('should filter out null/undefined children', function (done) {
        // The Cycle.js app
        function app(sources) {
            return {
                DOM: xstream_1.default.periodic(10).take(5).map(function (i) {
                    return index_1.div('.parent', [
                        'Child 1',
                        null,
                        index_1.h4('.child3', [
                            null,
                            'Grandchild 31',
                            index_1.div('.grandchild32', [
                                null,
                                'Great grandchild 322',
                            ]),
                        ]),
                        undefined,
                    ]);
                }),
            };
        }
        // Run it
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        // Assert it
        sources.DOM.select(':root').element().drop(1).take(1).addListener({
            next: function (root) {
                var divParent = root.querySelector('div.parent');
                var h4Child = root.querySelector('h4.child3');
                var grandchild = root.querySelector('div.grandchild32');
                assert.strictEqual(divParent.childNodes.length, 2);
                assert.strictEqual(h4Child.childNodes.length, 2);
                assert.strictEqual(grandchild.childNodes.length, 1);
                dispose();
                done();
            },
        });
        dispose = run();
    });
    it('should render correctly even if hyperscript-helper first is empty string', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.h4('', {}, ['Hello world'])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM.select(':root').element().drop(1).take(1).addListener({
            next: function (root) {
                var H4 = root.querySelector('h4');
                assert.strictEqual(H4.textContent, 'Hello world');
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should render textContent "0" given hyperscript content value number 0', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.my-class', 0)),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM.select(':root').element().drop(1).take(1).addListener({
            next: function (root) {
                var divEl = root.querySelector('.my-class');
                assert.strictEqual(divEl.textContent, '0');
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
});
