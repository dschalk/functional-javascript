"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var sinon = require("sinon");
var xstream_1 = require("xstream");
var delay_1 = require("xstream/extra/delay");
var flattenSequentially_1 = require("xstream/extra/flattenSequentially");
var run_1 = require("@cycle/run");
var index_1 = require("../../../lib/cjs/index");
if (isIE10) {
    window.MutationObserver = require('mutation-observer');
}
function createRenderTarget(id) {
    if (id === void 0) { id = null; }
    var element = document.createElement('div');
    element.className = 'cycletest';
    if (id) {
        element.id = id;
    }
    document.body.appendChild(element);
    return element;
}
describe('makeDOMDriver', function () {
    it('should accept a DOM element as input', function () {
        var element = createRenderTarget();
        assert.doesNotThrow(function () {
            index_1.makeDOMDriver(element);
        });
    });
    it('should accept a DocumentFragment as input', function () {
        if (isIE10) {
            return;
        }
        var docfrag = document.createDocumentFragment();
        assert.doesNotThrow(function () {
            index_1.makeDOMDriver(docfrag);
        });
    });
    it('should accept a string selector to an existing element as input', function () {
        var id = 'testShouldAcceptSelectorToExisting';
        var element = createRenderTarget();
        element.id = id;
        assert.doesNotThrow(function () {
            index_1.makeDOMDriver('#' + id);
        });
    });
    it('should not accept a selector to an unknown element as input', function (done) {
        var sandbox = sinon.sandbox.create();
        sandbox.stub(console, 'error');
        index_1.makeDOMDriver('#nonsenseIdToNothing')(xstream_1.default.never());
        setTimeout(function () {
            sinon.assert.calledOnce(console.error);
            sinon.assert.calledWithExactly(console.error, sinon.match({
                message: 'Cannot render into unknown element `#nonsenseIdToNothing`',
            }));
            sandbox.restore();
            done();
        }, 100);
    });
    it('should not accept a number as input', function () {
        assert.throws(function () {
            index_1.makeDOMDriver(123);
        }, /Given container is not a DOM element neither a selector string/);
    });
});
describe('DOM Driver', function () {
    it('should throw if input is not an Observable<VTree>', function () {
        var domDriver = index_1.makeDOMDriver(createRenderTarget());
        assert.throws(function () {
            domDriver({});
        }, /The DOM driver function expects as input a Stream of virtual/);
    });
    it('should have isolateSource() and isolateSink() in source', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div()),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose = run();
        assert.strictEqual(typeof sources.DOM.isolateSource, 'function');
        assert.strictEqual(typeof sources.DOM.isolateSink, 'function');
        dispose();
        done();
    });
    it('should report errors thrown in hooks', function (done) {
        var sandbox = sinon.sandbox.create();
        sandbox.stub(console, 'error');
        function main(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.test', {
                    hook: {
                        insert: function () {
                            throw new Error('error in hook');
                        },
                    },
                })),
            };
        }
        run_1.run(main, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        });
        setTimeout(function () {
            sinon.assert.calledOnce(console.error);
            sinon.assert.calledWithExactly(console.error, sinon.match({ message: 'error in hook' }));
            sandbox.restore();
            done();
        }, 100);
    });
    it('should not work after has been disposed', function (done) {
        var num$ = xstream_1.default
            .of(1, 2, 3)
            .map(function (x) { return xstream_1.default.of(x).compose(delay_1.default(50)); })
            .compose(flattenSequentially_1.default);
        function app(sources) {
            return {
                DOM: num$.map(function (num) { return index_1.h3('.target', String(num)); }),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        var hasDisposed = false;
        var assertionOngoing = false;
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .addListener({
            next: function (root) {
                var selectEl = root.querySelector('.target');
                if (!selectEl && assertionOngoing && hasDisposed) {
                    // This synchronous delivery of the empty root element is allowed
                    return;
                }
                if (!selectEl && !assertionOngoing && hasDisposed) {
                    done('DOM Driver should not emit anything asynchronously after dispose()');
                }
                if (selectEl && hasDisposed) {
                    done('DOM Driver should not emit a target element after dispose()');
                }
                assertionOngoing = true;
                assert.notStrictEqual(selectEl, null);
                assert.notStrictEqual(typeof selectEl, 'undefined');
                assert.strictEqual(selectEl.tagName, 'H3');
                assert.notStrictEqual(selectEl.textContent, '3');
                if (selectEl.textContent === '2') {
                    hasDisposed = true;
                    dispose();
                    setTimeout(function () {
                        done();
                    }, 100);
                }
                assertionOngoing = false;
            },
        });
        dispose = run();
    });
    it('should clean up DOM on disposal', function (done) {
        var hookTick = 0;
        var hookInterval;
        var hook = {
            insert: function () {
                hookInterval = setInterval(function () { return hookTick++; }, 10);
            },
            destroy: function () {
                clearInterval(hookInterval);
            },
        };
        function app() {
            return {
                DOM: xstream_1.default.of(index_1.h3('.target', { hook: hook }, 'dummy text')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget('disposal')),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose = run();
        setTimeout(function () {
            dispose();
            var hookTickOnDisposal = hookTick;
            setTimeout(function () {
                var renderTarget = document.getElementById('disposal');
                assert.equal(renderTarget.innerHTML, '');
                assert.ok(hookTick > 0);
                assert.equal(hookTickOnDisposal, hookTick);
                done();
            }, 50);
        }, 100);
    });
});
