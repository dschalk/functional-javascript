"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var xstream_1 = require("xstream");
var run_1 = require("@cycle/run");
var index_1 = require("../../../lib/cjs/index");
function createRenderTarget(id) {
    if (id === void 0) { id = null; }
    var element = document.createElement('div');
    element.className = 'cycletest';
    if (id) {
        element.id = id;
    }
    document.body.appendChild(element);
    return element;
}
if (isIE10) {
    window.MutationObserver = require('mutation-observer');
}
describe('DOMSource.elements()', function () {
    it('should return a stream of documents when querying "document"', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.top-most', [index_1.p('Foo'), index_1.span('Bar')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        function isDocument(element) {
            return 'body' in element && 'head' in element;
        }
        var dispose;
        sources.DOM
            .select('document')
            .element()
            .take(1)
            .addListener({
            next: function (root) {
                assert(root.body !== undefined); //Check type inference
                assert(isDocument(root));
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should return a stream of bodies when querying "body"', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.top-most', [index_1.p('Foo'), index_1.span('Bar')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        function isBody(element) {
            return 'aLink' in element && 'link' in element;
        }
        var dispose;
        sources.DOM
            .select('body')
            .element()
            .take(1)
            .addListener({
            next: function (root) {
                assert(root.aLink !== undefined); //Check type inference
                assert(isBody(root));
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should return a stream of arrays of elements of size 1 when querying ":root"', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.top-most', [index_1.p('Foo'), index_1.span('Bar')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM
            .select(':root')
            .elements()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                assert(root.forEach !== undefined); //Check type inference
                assert(Array.isArray(root));
                assert(root.length === 1);
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should return a stream of arrays of elements of size 2 when querying ".some"', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.top-most', [index_1.div('.some'), index_1.div('.some')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM
            .select('.some')
            .elements()
            .drop(1)
            .take(1)
            .addListener({
            next: function (elems) {
                assert(Array.isArray(elems));
                assert(elems.length === 2);
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
});
