"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var isolate_1 = require("@cycle/isolate");
var xstream_1 = require("xstream");
var delay_1 = require("xstream/extra/delay");
var concat_1 = require("xstream/extra/concat");
var run_1 = require("@cycle/run");
var index_1 = require("../../../lib/cjs/index");
if (isIE10) {
    window.MutationObserver = require('mutation-observer');
}
function createRenderTarget(id) {
    if (id === void 0) { id = null; }
    var element = document.createElement('div');
    element.className = 'cycletest';
    if (id) {
        element.id = id;
    }
    document.body.appendChild(element);
    return element;
}
function testFragmentEvents() {
    var captures = false;
    var bubbles = false;
    var captureEvent = document.createEvent('CustomEvent');
    var bubbleEvent = document.createEvent('CustomEvent');
    var fragment = document.createDocumentFragment();
    var parent = document.createElement('div');
    var child = document.createElement('div');
    fragment.appendChild(parent);
    parent.appendChild(child);
    parent.addEventListener('fragmentCapture', function () {
        captures = true;
    }, true);
    parent.addEventListener('fragmentBubble', function () {
        bubbles = true;
    }, false);
    captureEvent.initCustomEvent('fragmentCapture', false, true, null);
    bubbleEvent.initCustomEvent('fragmentBubble', true, true, null);
    child.dispatchEvent(captureEvent);
    child.dispatchEvent(bubbleEvent);
    return { captures: captures, bubbles: bubbles };
}
var fragmentSupport = testFragmentEvents();
describe('DOMSource.events()', function () {
    it('should catch a basic click interaction Observable', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.h3('.myelementclass', 'Foobar')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM
            .select('.myelementclass')
            .events('click')
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                assert.strictEqual(ev.target.textContent, 'Foobar');
                dispose();
                done();
            },
        });
        // Make assertions
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var myElement = root.querySelector('.myelementclass');
                assert.notStrictEqual(myElement, null);
                assert.notStrictEqual(typeof myElement, 'undefined');
                assert.strictEqual(myElement.tagName, 'H3');
                assert.doesNotThrow(function () {
                    setTimeout(function () { return myElement.click(); });
                });
            },
        });
        dispose = run();
    });
    it('should setup click detection with events() after run() occurs', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.h3('.test2.myelementclass', 'Foobar')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose = run();
        sources.DOM
            .select('.myelementclass')
            .events('click')
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                assert.strictEqual(ev.target.textContent, 'Foobar');
                dispose();
                done();
            },
        });
        // Make assertions
        setTimeout(function () {
            var myElement = document.querySelector('.test2.myelementclass');
            assert.notStrictEqual(myElement, null);
            assert.notStrictEqual(typeof myElement, 'undefined');
            assert.strictEqual(myElement.tagName, 'H3');
            assert.doesNotThrow(function () {
                setTimeout(function () { return myElement.click(); });
            });
        }, 200);
    });
    it('should setup click detection on a ready DOM element (e.g. from server)', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.never(),
            };
        }
        var containerElement = createRenderTarget();
        var headerElement = document.createElement('H3');
        headerElement.className = 'myelementclass';
        headerElement.textContent = 'Foobar';
        containerElement.appendChild(headerElement);
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(containerElement),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose = run();
        sources.DOM
            .select('.myelementclass')
            .events('click')
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                assert.strictEqual(ev.target.textContent, 'Foobar');
                dispose();
                done();
            },
        });
        // Make assertions
        setTimeout(function () {
            var myElement = containerElement.querySelector('.myelementclass');
            assert.notStrictEqual(myElement, null);
            assert.notStrictEqual(typeof myElement, 'undefined');
            assert.strictEqual(myElement.tagName, 'H3');
            assert.doesNotThrow(function () {
                setTimeout(function () { return myElement.click(); });
            });
        }, 200);
    });
    it('should catch events using id of root element in DOM.select', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.h3('.myelementclass', 'Foobar')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget('parent-001')),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        // Make assertions
        sources.DOM
            .select('#parent-001')
            .events('click')
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                assert.strictEqual(ev.target.textContent, 'Foobar');
                dispose();
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var myElement = root.querySelector('.myelementclass');
                assert.notStrictEqual(myElement, null);
                assert.notStrictEqual(typeof myElement, 'undefined');
                assert.strictEqual(myElement.tagName, 'H3');
                assert.doesNotThrow(function () {
                    setTimeout(function () { return myElement.click(); });
                });
            },
        });
        dispose = run();
    });
    it('should catch events using id of top element in DOM.select', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.h3('#myElementId', 'Foobar')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget('parent-002')),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        // Make assertions
        sources.DOM
            .select('#myElementId')
            .events('click')
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                assert.strictEqual(ev.target.textContent, 'Foobar');
                dispose();
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var myElement = root.querySelector('#myElementId');
                assert.notStrictEqual(myElement, null);
                assert.notStrictEqual(typeof myElement, 'undefined');
                assert.strictEqual(myElement.tagName, 'H3');
                assert.doesNotThrow(function () {
                    setTimeout(function () { return myElement.click(); });
                });
            },
        });
        dispose = run();
    });
    it('should catch interaction events without prior select()', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.h3('.myelementclass', 'Foobar')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        // Make assertions
        sources.DOM.events('click').addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                assert.strictEqual(ev.target.textContent, 'Foobar');
                dispose();
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var myElement = root.querySelector('.myelementclass');
                assert.notStrictEqual(myElement, null);
                assert.notStrictEqual(typeof myElement, 'undefined');
                assert.strictEqual(myElement.tagName, 'H3');
                assert.doesNotThrow(function () {
                    setTimeout(function () { return myElement.click(); });
                });
            },
        });
        dispose = run();
    });
    it('should catch user events using DOM.select().select().events()', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.h3('.top-most', [
                    index_1.h2('.bar', 'Wrong'),
                    index_1.div('.foo', [index_1.h4('.bar', 'Correct')]),
                ])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        // Make assertions
        sources.DOM
            .select('.foo')
            .select('.bar')
            .events('click')
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                assert.strictEqual(ev.target.textContent, 'Correct');
                dispose();
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var wrongElement = root.querySelector('.bar');
                var correctElement = root.querySelector('.foo .bar');
                assert.notStrictEqual(wrongElement, null);
                assert.notStrictEqual(correctElement, null);
                assert.notStrictEqual(typeof wrongElement, 'undefined');
                assert.notStrictEqual(typeof correctElement, 'undefined');
                assert.strictEqual(wrongElement.tagName, 'H2');
                assert.strictEqual(correctElement.tagName, 'H4');
                assert.doesNotThrow(function () {
                    setTimeout(function () { return wrongElement.click(); });
                    setTimeout(function () { return correctElement.click(); }, 15);
                });
            },
        });
        dispose = run();
    });
    it('should catch events from many elements using DOM.select().events()', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [
                    index_1.h4('.clickable.first', 'First'),
                    index_1.h4('.clickable.second', 'Second'),
                ])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        // Make assertions
        sources.DOM
            .select('.clickable')
            .events('click')
            .take(1)
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                assert.strictEqual(ev.target.textContent, 'First');
            },
        });
        sources.DOM
            .select('.clickable')
            .events('click')
            .drop(1)
            .take(1)
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                assert.strictEqual(ev.target.textContent, 'Second');
                dispose();
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var firstElem = root.querySelector('.first');
                var secondElem = root.querySelector('.second');
                assert.notStrictEqual(firstElem, null);
                assert.notStrictEqual(typeof firstElem, 'undefined');
                assert.notStrictEqual(secondElem, null);
                assert.notStrictEqual(typeof secondElem, 'undefined');
                assert.doesNotThrow(function () {
                    setTimeout(function () { return firstElem.click(); });
                    setTimeout(function () { return secondElem.click(); }, 5);
                });
            },
        });
        dispose = run();
    });
    it('should catch interaction events from future elements', function (done) {
        function app(sources) {
            return {
                DOM: concat_1.default(xstream_1.default.of(index_1.h2('.blesh', 'Blesh')), xstream_1.default.of(index_1.h3('.blish', 'Blish')).compose(delay_1.default(150)), xstream_1.default.of(index_1.h4('.blosh', 'Blosh')).compose(delay_1.default(150))),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget('parent-002')),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        // Make assertions
        sources.DOM
            .select('.blosh')
            .events('click')
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                assert.strictEqual(ev.target.textContent, 'Blosh');
                dispose();
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(3)
            .take(1)
            .addListener({
            next: function (root) {
                var myElement = root.querySelector('.blosh');
                assert.notStrictEqual(myElement, null);
                assert.notStrictEqual(typeof myElement, 'undefined');
                assert.strictEqual(myElement.tagName, 'H4');
                assert.strictEqual(myElement.textContent, 'Blosh');
                assert.doesNotThrow(function () {
                    setTimeout(function () { return myElement.click(); });
                });
            },
        });
        dispose = run();
    });
    it('should catch bubbling events in a DocumentFragment', function (done) {
        if (isIE10) {
            done();
            return;
        }
        var thisBrowserBubblesFragmentEvents = fragmentSupport.bubbles;
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div([index_1.div('.clickable', 'Hello')])),
            };
        }
        if (!thisBrowserBubblesFragmentEvents) {
            done();
        }
        else {
            var fragment = document.createDocumentFragment();
            var renderTarget = fragment.appendChild(document.createElement('div'));
            var _a = run_1.setup(app, {
                DOM: index_1.makeDOMDriver(renderTarget),
            }), sinks = _a.sinks, sources = _a.sources, run_2 = _a.run;
            sources.DOM
                .select('.clickable')
                .events('click', { useCapture: false })
                .addListener({
                next: function (ev) {
                    var elem = ev.target;
                    assert.strictEqual(ev.type, 'click');
                    assert.strictEqual(elem.tagName, 'DIV');
                    assert.strictEqual(elem.className, 'clickable');
                    assert.strictEqual(elem.textContent, 'Hello');
                    var top = elem.parentElement;
                    var renderTarget2 = top.parentNode;
                    var frag = renderTarget2.parentNode;
                    assert.strictEqual(frag instanceof DocumentFragment, true);
                    done();
                },
            });
            sources.DOM
                .select(':root')
                .element()
                .drop(1)
                .take(1)
                .addListener({
                next: function (root) {
                    var clickable = root.querySelector('.clickable');
                    setTimeout(function () { return clickable.click(); }, 80);
                },
            });
            run_2();
        }
    });
    it('should catch non-bubbling events in a DocumentFragment with useCapture', function (done) {
        if (isIE10) {
            done();
            return;
        }
        var thisBrowserCapturesFragmentEvents = fragmentSupport.captures;
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div([index_1.div('.clickable', 'Hello')])),
            };
        }
        if (!thisBrowserCapturesFragmentEvents) {
            done();
        }
        else {
            var fragment = document.createDocumentFragment();
            var renderTarget = fragment.appendChild(document.createElement('div'));
            var _a = run_1.setup(app, {
                DOM: index_1.makeDOMDriver(renderTarget),
            }), sinks = _a.sinks, sources = _a.sources, run_3 = _a.run;
            sources.DOM
                .select('.clickable')
                .events('click', { useCapture: true })
                .addListener({
                next: function (ev) {
                    var elem = ev.target;
                    assert.strictEqual(ev.type, 'click');
                    assert.strictEqual(elem.tagName, 'DIV');
                    assert.strictEqual(elem.className, 'clickable');
                    assert.strictEqual(elem.textContent, 'Hello');
                    var top = elem.parentElement;
                    var renderTarget2 = top.parentNode;
                    var frag = renderTarget2.parentNode;
                    assert.strictEqual(frag instanceof DocumentFragment, true);
                    done();
                },
            });
            sources.DOM
                .select(':root')
                .element()
                .drop(1)
                .take(1)
                .addListener({
                next: function (root) {
                    var clickable = root.querySelector('.clickable');
                    setTimeout(function () { return clickable.click(); }, 80);
                },
            });
            run_3();
        }
    });
    it('should have currentTarget or ownerTarget pointed to the selected parent', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.top', [index_1.h2('.parent', [index_1.span('.child', 'Hello world')])])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM
            .select('.parent')
            .events('click')
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'SPAN');
                assert.strictEqual(target.className, 'child');
                assert.strictEqual(target.textContent, 'Hello world');
                var currentTarget = ev.currentTarget;
                var ownerTarget = ev.ownerTarget;
                var currentTargetIsParentH2 = currentTarget.tagName === 'H2' &&
                    currentTarget.className === 'parent';
                var ownerTargetIsParentH2 = ownerTarget.tagName === 'H2' && ownerTarget.className === 'parent';
                assert.strictEqual(currentTargetIsParentH2 || ownerTargetIsParentH2, true);
                dispose();
                done();
            },
        });
        // Make assertions
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var child = root.querySelector('.child');
                assert.notStrictEqual(child, null);
                assert.notStrictEqual(typeof child, 'undefined');
                assert.strictEqual(child.tagName, 'SPAN');
                assert.strictEqual(child.className, 'child');
                assert.doesNotThrow(function () {
                    setTimeout(function () { return child.click(); });
                });
            },
        });
        dispose = run();
    });
    it('should catch a non-bubbling Form `reset` event', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.form('.form', [index_1.input('.field', { type: 'text' })])])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        sources.DOM
            .select('.form')
            .events('reset')
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'reset');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'FORM');
                assert.strictEqual(target.className, 'form');
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var form = root.querySelector('.form');
                setTimeout(function () { return form.reset(); });
            },
        });
        run();
    });
    it('should catch a non-bubbling click event with useCapture', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.div('.clickable', 'Hello')])),
            };
        }
        function click(el) {
            var ev = document.createEvent("MouseEvent");
            ev.initMouseEvent("click", false /* bubble */, true /* cancelable */, window, 0, 0, 0, 0, 0 /* coordinates */, false, false, false, false /* modifier keys */, 0 /*left*/, null);
            el.dispatchEvent(ev);
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        sources.DOM
            .select('.clickable')
            .events('click', { useCapture: true })
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'DIV');
                assert.strictEqual(target.className, 'clickable');
                assert.strictEqual(target.textContent, 'Hello');
                done();
            },
        });
        sources.DOM
            .select('.clickable')
            .events('click', { useCapture: false })
            .addListener({
            next: function (x) {
                done(x);
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var clickable = root.querySelector('.clickable');
                setTimeout(function () { return click(clickable); });
            },
        });
        run();
    });
    it('should catch a blur event with useCapture', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [
                    index_1.input('.correct', { type: 'text' }, []),
                    index_1.input('.wrong', { type: 'text' }, []),
                    index_1.input('.dummy', { type: 'text' }),
                ])),
            };
        }
        if (!document.hasFocus()) {
            done();
        }
        else {
            var _a = run_1.setup(app, {
                DOM: index_1.makeDOMDriver(createRenderTarget()),
            }), sinks = _a.sinks, sources = _a.sources, run_4 = _a.run;
            sources.DOM
                .select('.correct')
                .events('blur', { useCapture: true })
                .addListener({
                next: function (ev) {
                    assert.strictEqual(ev.type, 'blur');
                    assert.strictEqual(ev.target.className, 'correct');
                    done();
                },
            });
            sources.DOM
                .select(':root')
                .element()
                .drop(1)
                .take(1)
                .addListener({
                next: function (root) {
                    var correct = root.querySelector('.correct');
                    var wrong = root.querySelector('.wrong');
                    var dummy = root.querySelector('.dummy');
                    setTimeout(function () { return wrong.focus(); }, 50);
                    setTimeout(function () { return dummy.focus(); }, 100);
                    setTimeout(function () { return correct.focus(); }, 150);
                    setTimeout(function () { return dummy.focus(); }, 200);
                },
            });
            run_4();
        }
    });
    it('should catch a blur event by default (no options)', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [
                    index_1.input('.correct', { type: 'text' }, []),
                    index_1.input('.wrong', { type: 'text' }, []),
                    index_1.input('.dummy', { type: 'text' }),
                ])),
            };
        }
        if (!document.hasFocus()) {
            done();
        }
        else {
            var _a = run_1.setup(app, {
                DOM: index_1.makeDOMDriver(createRenderTarget()),
            }), sinks = _a.sinks, sources = _a.sources, run_5 = _a.run;
            sources.DOM
                .select('.correct')
                .events('blur')
                .addListener({
                next: function (ev) {
                    assert.strictEqual(ev.type, 'blur');
                    assert.strictEqual(ev.target.className, 'correct');
                    done();
                },
            });
            sources.DOM
                .select(':root')
                .element()
                .drop(1)
                .take(1)
                .addListener({
                next: function (root) {
                    var correct = root.querySelector('.correct');
                    var wrong = root.querySelector('.wrong');
                    var dummy = root.querySelector('.dummy');
                    setTimeout(function () { return wrong.focus(); }, 50);
                    setTimeout(function () { return dummy.focus(); }, 100);
                    setTimeout(function () { return correct.focus(); }, 150);
                    setTimeout(function () { return dummy.focus(); }, 200);
                },
            });
            run_5();
        }
    });
    it('should not simulate bubbling for non-bubbling events', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.form('.form', [index_1.input('.field', { type: 'text' })])])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        sources.DOM
            .select('.parent')
            .events('reset')
            .addListener({
            next: function (ev) {
                done(new Error('Reset event should not bubble to parent'));
            },
        });
        sources.DOM
            .select('.form')
            .events('reset')
            .compose(delay_1.default(200))
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'reset');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'FORM');
                assert.strictEqual(target.className, 'form');
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var form = root.querySelector('.form');
                setTimeout(function () { return form.reset(); });
            },
        });
        run();
    });
    it('should have the DevTools flag in the source stream', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.h3('.myelementclass', 'Foobar')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var event$ = sources.DOM.select('.myelementclass').events('click');
        assert.strictEqual(event$._isCycleSource, 'DOM');
        done();
    });
    it('should allow restarting of event streams from isolated components', function (done) {
        var outSubject = xstream_1.default.create();
        var switchSubject = xstream_1.default.create();
        function component(sources) {
            var itemMouseDown$ = sources.DOM.select('.item').events('mousedown');
            var itemMouseUp$ = sources.DOM.select('.item').events('mouseup');
            var itemMouseClick$ = itemMouseDown$
                .map(function (down) { return itemMouseUp$.filter(function (up) { return down.target === up.target; }); })
                .flatten();
            switchSubject
                .map(function () { return itemMouseClick$; })
                .flatten()
                .addListener({
                next: function (ev) {
                    outSubject.shamefullySendNext(ev);
                },
            });
            return {
                DOM: xstream_1.default.of(index_1.button('.item', ['stuff'])),
            };
        }
        function app(sources) {
            //return component(sources)
            return isolate_1.default(component)(sources);
        }
        function mouseevent(el, type) {
            // This works on IE10
            var ev = document.createEvent('MouseEvent');
            ev.initMouseEvent(type, false /* bubble */, true /* cancelable */, window, 0, 0, 0, 0, 0 /* coordinates */, false, false, false, false /* modifier keys */, 0 /*left*/, null);
            // Would rather user this line below but does not work on IE10
            //const ev = new MouseEvent(type)
            el.dispatchEvent(ev);
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var count = 0;
        outSubject.addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'mouseup');
                count++;
                if (count === 2) {
                    done();
                }
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var clickable = root.querySelector('.item');
                setTimeout(function () { return switchSubject.shamefullySendNext(null); });
                setTimeout(function () { return mouseevent(clickable, 'mousedown'); }, 100);
                setTimeout(function () { return mouseevent(clickable, 'mouseup'); }, 200);
                setTimeout(function () { return switchSubject.shamefullySendNext(null); }, 300);
                setTimeout(function () { return mouseevent(clickable, 'mousedown'); }, 400);
                setTimeout(function () { return mouseevent(clickable, 'mouseup'); }, 500);
            },
        });
        run();
    });
    it('should allow preventing default event behavior', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.button('.button')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        sources.DOM
            .select('.button')
            .events('click', { preventDefault: true })
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'BUTTON');
                assert.strictEqual(target.className, 'button');
                assert.strictEqual(ev.defaultPrevented, true);
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var button = root.querySelector('.button');
                setTimeout(function () { return button.click(); });
            },
        });
        run();
    });
    it('should allow preventing default event behavior with function', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.button('.button')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        sources.DOM
            .select('.button')
            .events('click', { preventDefault: function (ev) { return ev.type === 'click'; } })
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'BUTTON');
                assert.strictEqual(target.className, 'button');
                assert.strictEqual(ev.defaultPrevented, true);
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var button = root.querySelector('.button');
                setTimeout(function () { return button.click(); });
            },
        });
        run();
    });
    it('should allow preventing default event behavior with object', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.button('.button')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        sources.DOM
            .select('.button')
            .events('click', { preventDefault: { type: 'click' } })
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'BUTTON');
                assert.strictEqual(target.className, 'button');
                assert.strictEqual(ev.defaultPrevented, true);
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var button = root.querySelector('.button');
                setTimeout(function () { return button.click(); });
            },
        });
        run();
    });
    it('should allow preventing default event behavior with array in object', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.button('.button.to-prevent')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        sources.DOM
            .select('.button')
            .events('click', {
            preventDefault: { target: { classList: ['button', 'to-prevent'] } },
        })
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'BUTTON');
                assert.strictEqual(target.className, 'button to-prevent');
                assert.strictEqual(ev.defaultPrevented, true);
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var button = root.querySelector('.button');
                setTimeout(function () { return button.click(); });
            },
        });
        run();
    });
    it('should not prevent default on returning false from function predicate', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.button('.button')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        sources.DOM
            .select('.button')
            .events('click', { preventDefault: function (ev) { return ev.type !== 'click'; } })
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'BUTTON');
                assert.strictEqual(target.className, 'button');
                assert.strictEqual(ev.defaultPrevented, false);
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var button = root.querySelector('.button');
                setTimeout(function () { return button.click(); });
            },
        });
        run();
    });
    it('should not prevent default on returning false from object predicate', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.button('.button')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        sources.DOM
            .select('.button')
            .events('click', { preventDefault: { type: 'notClick' } })
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'BUTTON');
                assert.strictEqual(target.className, 'button');
                assert.strictEqual(ev.defaultPrevented, false);
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var button = root.querySelector('.button');
                setTimeout(function () { return button.click(); });
            },
        });
        run();
    });
    it('should not prevent default on returning false from array-in-object predicate', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(index_1.div('.parent', [index_1.button('.button.to-prevent')])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: index_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        sources.DOM
            .select('.button')
            .events('click', {
            preventDefault: { target: { classList: ['button', 'missing-class'] } },
        })
            .addListener({
            next: function (ev) {
                assert.strictEqual(ev.type, 'click');
                var target = ev.target;
                assert.strictEqual(target.tagName, 'BUTTON');
                assert.strictEqual(target.className, 'button to-prevent');
                assert.strictEqual(ev.defaultPrevented, false);
                done();
            },
        });
        sources.DOM
            .select(':root')
            .element()
            .drop(1)
            .take(1)
            .addListener({
            next: function (root) {
                var button = root.querySelector('.button');
                setTimeout(function () { return button.click(); });
            },
        });
        run();
    });
});
