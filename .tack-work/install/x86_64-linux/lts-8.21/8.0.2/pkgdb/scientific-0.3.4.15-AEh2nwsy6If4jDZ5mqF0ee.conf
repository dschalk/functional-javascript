name: scientific
version: 0.3.4.15
id: scientific-0.3.4.15-AEh2nwsy6If4jDZ5mqF0ee
key: scientific-0.3.4.15-AEh2nwsy6If4jDZ5mqF0ee
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: 9fd0cea1d850b000d6ea0b0d27c087e6
trusted: False
import-dirs: /home/e/MonadState/monads-in-javascript/.stack-work/install/x86_64-linux/lts-8.21/8.0.2/lib/x86_64-linux-ghc-8.0.2/scientific-0.3.4.15-AEh2nwsy6If4jDZ5mqF0ee
library-dirs: /home/e/MonadState/monads-in-javascript/.stack-work/install/x86_64-linux/lts-8.21/8.0.2/lib/x86_64-linux-ghc-8.0.2/scientific-0.3.4.15-AEh2nwsy6If4jDZ5mqF0ee
dynamic-library-dirs: /home/e/MonadState/monads-in-javascript/.stack-work/install/x86_64-linux/lts-8.21/8.0.2/lib/x86_64-linux-ghc-8.0.2
data-dir: /home/e/MonadState/monads-in-javascript/.stack-work/install/x86_64-linux/lts-8.21/8.0.2/share/x86_64-linux-ghc-8.0.2/scientific-0.3.4.15
hs-libraries: HSscientific-0.3.4.15-AEh2nwsy6If4jDZ5mqF0ee
depends:
    base-4.9.1.0 binary-0.8.3.0 bytestring-0.10.8.1 containers-0.5.7.1
    deepseq-1.4.2.0 ghc-prim-0.5.0.0
    hashable-1.2.6.1-I8TtfTMw8kCEo1q1h2BgxU integer-gmp-1.0.0.1
    integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
    text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
    vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
haddock-interfaces: /home/e/MonadState/monads-in-javascript/.stack-work/install/x86_64-linux/lts-8.21/8.0.2/doc/scientific-0.3.4.15/scientific.haddock
haddock-html: /home/e/MonadState/monads-in-javascript/.stack-work/install/x86_64-linux/lts-8.21/8.0.2/doc/scientific-0.3.4.15
